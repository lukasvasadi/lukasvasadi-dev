import{s as Ie,n as ce}from"./scheduler.be0e0057.js";import{S as qe,i as ze,g as o,s as a,H as r,h as p,D as c,c as n,G as d,a as l,f as t}from"./index.c7c9b348.js";function Ne(He){let i,ie="Contents",Q,C,re='<li><a href="#introduction">Introduction</a></li> <li><a href="#installation">Installation</a></li> <li><a href="#basics">Basics</a></li>',V,u,de='<a id="introduction">Introduction</a>',$,m,Ce="CMake is an open-source, cross-platform automation tool for generating C/C++ Makefiles, which can then be used to build the source. It has become the <em>de facto</em> build system for the developer community as well as major companies, such as Qt and ST Microelectronics.",K,y,ue='<a id="installation">Installation</a>',X,A,me="See below for platform-specific commands to install the CMake toolchain. The rest of the tutorial will use Unix-style commands, but these should be directly transferable to Windows systems.",Y,D,ye="<strong>Windows (Chocolatey):</strong>",Z,L,we='<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">choco install cmake</span></span></code></pre>',T,f,Ae="<strong>macOS (Homebrew):</strong>",g,F,Le='<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">brew</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">install</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">cmake</span></span></code></pre>',B,h,De="<strong>Linux:</strong>",ee,P,Te='<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">sudo</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">apt</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">install</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">cmake</span></span></code></pre>',j,b,fe='<a id="basics">Basics</a>',se,k,he="CMake relies on a top-level file called <code>CMakeLists.txt</code>, which should be created in the same directory as the source. (Remember, it is good practice to separate source code and binary files.) To demonstrate a CMake project, we can create a <code>HelloCMake</code> directory, with <code>src</code> and <code>build</code> subdirectories, under <code>home</code>:",le,S,Fe='<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">mkdir</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">-p</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">~/HelloCMake/src</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">~/HelloCMake/build</span></span></code></pre>',E,_,be="Under the <code>src</code> directory, create a <code>main.cpp</code> file:",te,I,Be=`<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #E4F0FB">#import</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&lt;</span><span style="color: #A6ACCD">iostream</span><span style="color: #91B4D5">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">int</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">main</span><span style="color: #A6ACCD">() &#123;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">std</span><span style="color: #A6ACCD">::cout </span><span style="color: #91B4D5">&lt;&lt;</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">&quot;</span><span style="color: #5DE4C7">Hey, CMake!</span><span style="color: #A6ACCD">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&lt;&lt;</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">std</span><span style="color: #A6ACCD">::endl;</span></span>
<span class="line"><span style="color: #A6ACCD">    return </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">;</span></span>
<span class="line"><span style="color: #A6ACCD">&#125;</span></span></code></pre>`,q,M,ke="Add a <code>CMakeLists.txt</code> file (use the CMake version output from <code>cmake --version</code>):",ae,z,Pe=`<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">cmake_minimum_required(VERSION 3.27.4)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">project(hello)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">add_executable($&#123;PROJECT_NAME&#125; main.cpp)</span></span></code></pre>`,N,v,_e="To generate the Makefile, which contains the recipe to build the source, run the <code>cmake</code> command and specify the locations of the <code>src</code> and <code>build</code> directories:",ne,O,je='<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">cmake</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">-S</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">~/HelloCMake/src</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">-B</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">~/HelloCMake/build</span></span></code></pre>',R,x,Me="After running that command, the project folder should appear as follows:",oe,U,Se=`<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #a6accd">├── build</span></span>
<span class="line"><span style="color: #a6accd">│   ├── CMakeCache.txt</span></span>
<span class="line"><span style="color: #a6accd">│   ├── CMakeFiles</span></span>
<span class="line"><span style="color: #a6accd">│   ├── Makefile</span></span>
<span class="line"><span style="color: #a6accd">│   └── cmake_install.cmake</span></span>
<span class="line"><span style="color: #a6accd">└── src</span></span>
<span class="line"><span style="color: #a6accd">    ├── CMakeLists.txt</span></span>
<span class="line"><span style="color: #a6accd">    └── main.cpp</span></span></code></pre>`,W,H,ve="Now run the <code>make</code> command inside the build folder:",pe,G,Ee=`<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">cd</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">~/HelloCMake/build</span></span>
<span class="line"><span style="color: #91B4D5">make</span></span></code></pre>`,J,w,xe="At this point, if the build was successful, there will be an executable called <code>hello</code>, which can be run with <code>./hello</code>.";return{c(){i=o("h2"),i.textContent=ie,Q=a(),C=o("ul"),C.innerHTML=re,V=a(),u=o("h2"),u.innerHTML=de,$=a(),m=o("p"),m.innerHTML=Ce,K=a(),y=o("h2"),y.innerHTML=ue,X=a(),A=o("p"),A.textContent=me,Y=a(),D=o("p"),D.innerHTML=ye,Z=a(),L=new r(!1),T=a(),f=o("p"),f.innerHTML=Ae,g=a(),F=new r(!1),B=a(),h=o("p"),h.innerHTML=De,ee=a(),P=new r(!1),j=a(),b=o("h2"),b.innerHTML=fe,se=a(),k=o("p"),k.innerHTML=he,le=a(),S=new r(!1),E=a(),_=o("p"),_.innerHTML=be,te=a(),I=new r(!1),q=a(),M=o("p"),M.innerHTML=ke,ae=a(),z=new r(!1),N=a(),v=o("p"),v.innerHTML=_e,ne=a(),O=new r(!1),R=a(),x=o("p"),x.textContent=Me,oe=a(),U=new r(!1),W=a(),H=o("p"),H.innerHTML=ve,pe=a(),G=new r(!1),J=a(),w=o("p"),w.innerHTML=xe,this.h()},l(e){i=p(e,"H2",{"data-svelte-h":!0}),c(i)!=="svelte-jpxk5s"&&(i.textContent=ie),Q=n(e),C=p(e,"UL",{"data-svelte-h":!0}),c(C)!=="svelte-1ywwmzp"&&(C.innerHTML=re),V=n(e),u=p(e,"H2",{"data-svelte-h":!0}),c(u)!=="svelte-117zo8l"&&(u.innerHTML=de),$=n(e),m=p(e,"P",{"data-svelte-h":!0}),c(m)!=="svelte-1pr33fw"&&(m.innerHTML=Ce),K=n(e),y=p(e,"H2",{"data-svelte-h":!0}),c(y)!=="svelte-1dz9mr"&&(y.innerHTML=ue),X=n(e),A=p(e,"P",{"data-svelte-h":!0}),c(A)!=="svelte-1f74u61"&&(A.textContent=me),Y=n(e),D=p(e,"P",{"data-svelte-h":!0}),c(D)!=="svelte-1nermpu"&&(D.innerHTML=ye),Z=n(e),L=d(e,!1),T=n(e),f=p(e,"P",{"data-svelte-h":!0}),c(f)!=="svelte-1m1hzlg"&&(f.innerHTML=Ae),g=n(e),F=d(e,!1),B=n(e),h=p(e,"P",{"data-svelte-h":!0}),c(h)!=="svelte-rurumh"&&(h.innerHTML=De),ee=n(e),P=d(e,!1),j=n(e),b=p(e,"H2",{"data-svelte-h":!0}),c(b)!=="svelte-rxkq8j"&&(b.innerHTML=fe),se=n(e),k=p(e,"P",{"data-svelte-h":!0}),c(k)!=="svelte-1dxlr2h"&&(k.innerHTML=he),le=n(e),S=d(e,!1),E=n(e),_=p(e,"P",{"data-svelte-h":!0}),c(_)!=="svelte-1crpdwr"&&(_.innerHTML=be),te=n(e),I=d(e,!1),q=n(e),M=p(e,"P",{"data-svelte-h":!0}),c(M)!=="svelte-bess08"&&(M.innerHTML=ke),ae=n(e),z=d(e,!1),N=n(e),v=p(e,"P",{"data-svelte-h":!0}),c(v)!=="svelte-1ianm7x"&&(v.innerHTML=_e),ne=n(e),O=d(e,!1),R=n(e),x=p(e,"P",{"data-svelte-h":!0}),c(x)!=="svelte-ss2ft7"&&(x.textContent=Me),oe=n(e),U=d(e,!1),W=n(e),H=p(e,"P",{"data-svelte-h":!0}),c(H)!=="svelte-gzlsh7"&&(H.innerHTML=ve),pe=n(e),G=d(e,!1),J=n(e),w=p(e,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1stwohn"&&(w.innerHTML=xe),this.h()},h(){L.a=T,F.a=B,P.a=j,S.a=E,I.a=q,z.a=N,O.a=R,U.a=W,G.a=J},m(e,s){l(e,i,s),l(e,Q,s),l(e,C,s),l(e,V,s),l(e,u,s),l(e,$,s),l(e,m,s),l(e,K,s),l(e,y,s),l(e,X,s),l(e,A,s),l(e,Y,s),l(e,D,s),l(e,Z,s),L.m(we,e,s),l(e,T,s),l(e,f,s),l(e,g,s),F.m(Le,e,s),l(e,B,s),l(e,h,s),l(e,ee,s),P.m(Te,e,s),l(e,j,s),l(e,b,s),l(e,se,s),l(e,k,s),l(e,le,s),S.m(Fe,e,s),l(e,E,s),l(e,_,s),l(e,te,s),I.m(Be,e,s),l(e,q,s),l(e,M,s),l(e,ae,s),z.m(Pe,e,s),l(e,N,s),l(e,v,s),l(e,ne,s),O.m(je,e,s),l(e,R,s),l(e,x,s),l(e,oe,s),U.m(Se,e,s),l(e,W,s),l(e,H,s),l(e,pe,s),G.m(Ee,e,s),l(e,J,s),l(e,w,s)},p:ce,i:ce,o:ce,d(e){e&&(t(i),t(Q),t(C),t(V),t(u),t($),t(m),t(K),t(y),t(X),t(A),t(Y),t(D),t(Z),L.d(),t(T),t(f),t(g),F.d(),t(B),t(h),t(ee),P.d(),t(j),t(b),t(se),t(k),t(le),S.d(),t(E),t(_),t(te),I.d(),t(q),t(M),t(ae),z.d(),t(N),t(v),t(ne),O.d(),t(R),t(x),t(oe),U.d(),t(W),t(H),t(pe),G.d(),t(J),t(w))}}}const Ue={title:"Building C/C++ projects with CMake",description:"Leverage CMake to automate the source code build process",date:"2023-09-30",image:"/images/macbook-code.jpg",categories:["CMake"],published:!0};class We extends qe{constructor(i){super(),ze(this,i,null,Ne,Ie,{})}}export{We as default,Ue as metadata};
