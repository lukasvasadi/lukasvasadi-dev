import{s as ja,n as Ua}from"./scheduler.ae1baad1.js";import{S as Va,i as Ga,g as p,s as n,r as y,H as i,e as ta,h as o,z as c,c as t,u as d,D as r,a as l,v as u,d as C,t as m,f as a,w as f}from"./index.0e1198e2.js";import{T as pa}from"./tag.71a37a0c.js";import{H as rs}from"./heading.44adad14.js";function za(oa){let B,_l="Contents",we,b,Dl='<li><a href="#introduction">Introduction</a></li> <li><a href="#installation">Installation</a></li> <li><a href="#basics">Basics</a></li> <li><a href="#libraries">Libraries</a></li> <li><a href="#variables">Variables</a></li> <li><a href="#options">Options</a></li> <li><a href="#command-line-options">Command line options</a></li>',Me,A,Ee,F,kl="CMake is an open-source, cross-platform automation tool for generating C/C++ Makefiles, which can then be used to build the source. It has become the <em>de facto</em> build system for the developer community as well as major companies, such as Qt and ST Microelectronics.",Le,_,Te,D,hl="See below for platform-specific commands to install the CMake toolchain. The rest of the tutorial will use Unix-style commands, but these should be directly transferable to Windows systems. Note that each platform also requires a dedicated compiler for C/C++ applications.",$e,k,xl="<strong>Windows (Chocolatey):</strong>",He,Bs,ca='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">choco install cmake visualstudio2022buildtools</span></span></code></pre>',ys,h,vl="<strong>macOS (Homebrew):</strong>",Pe,ds,ia='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">brew</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">llvm</span></span></code></pre>',us,x,wl="<strong>Linux:</strong>",Ne,Cs,ra='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">apt</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">make</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">gcc</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">g++</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">gdb</span></span></code></pre>',ms,v,Ie,w,Ml="CMake relies on a top-level file called <code>CMakeLists.txt</code>, which should be created in the same directory as the source. (It is good practice to separate source code and build files.) To demonstrate a CMake project, we can create a <code>HelloCMake</code> directory with a <code>build</code> subdirectory:",Se,fs,Ba='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">mkdir</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/HelloCMake/build</span></span></code></pre>',bs,M,El="Create a <code>~/HelloCMake/main.cpp</code> file:",Re,As,ya=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #E06C75">#import</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">iostream</span><span style="color: #C678DD">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout, std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;Hey, CMake!&quot;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre>`,Fs,E,Ll="Add a <code>CMakeLists.txt</code> file (use the CMake version output from <code>cmake --version</code>):",Oe,_s,da=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">cmake_minimum_required</span><span style="color: #ABB2BF">(VERSION 3.27.4)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">project</span><span style="color: #ABB2BF">(hello)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">add_executable</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span><span style="color: #ABB2BF"> main.cpp)</span></span></code></pre>`,Ds,L,Tl="To generate the Makefile, which contains the recipe to build the source, run the <code>cmake</code> command and specify the locations of the <code>src</code> and <code>build</code> directories:",qe,ks,ua='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-S</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/HelloCMake</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-B</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/HelloCMake/build</span></span></code></pre>',hs,T,$l="After running that command, the project folder should appear as follows:",Xe,xs,Ca=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">├── build</span></span>
<span class="line"><span style="color: #abb2bf">│   ├── CMakeCache.txt</span></span>
<span class="line"><span style="color: #abb2bf">│   ├── CMakeFiles</span></span>
<span class="line"><span style="color: #abb2bf">│   ├── Makefile</span></span>
<span class="line"><span style="color: #abb2bf">│   └── cmake_install.cmake</span></span>
<span class="line"><span style="color: #abb2bf">├── CMakeLists.txt</span></span>
<span class="line"><span style="color: #abb2bf">└── main.cpp</span></span></code></pre>`,vs,$,Hl="Now run the <code>make</code> command inside the build folder:",ge,ws,ma=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/HelloCMake/build</span></span>
<span class="line"><span style="color: #61AFEF">make</span></span></code></pre>`,Ms,H,Pl="At this point, if the build was successful, there will be an executable called <code>hello</code>, which can be run with <code>./hello</code>.",je,P,Nl="In addition to setting the CMake version requirements, project name, and source target, we can specify the project version and languages, as well as the C/C++ ISO standard. CMake also provides an install keyword to specify the executable target directory. This feature is especially helpful for Linux users who may want their program to be accessible from the command line. For example, the below CMake file will place our <code>hello</code> executable into the system <code>bin</code> folder:",Ue,Es,fa=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">cmake_minimum_required</span><span style="color: #ABB2BF">(VERSION 3.27.4)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">project</span><span style="color: #ABB2BF">(hello VERSION 1.0.0 LANGUAGES C CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">add_executable</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span><span style="color: #ABB2BF"> main.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">install</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">TARGET</span><span style="color: #ABB2BF"> hello DESTINATION bin)</span></span></code></pre>`,Ls,N,Il="With this configuration, we can run the <code>make install</code> command with root privileges to install the executable into <code>/usr/local/bin</code>:",Ve,Ts,ba='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">make</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span></span></code></pre>',$s,I,Sl="Now we can run the application from anywhere in the file system:",Ge,Hs,Aa='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">hello</span></span></code></pre>',Ps,S,ze,R,Rl="Most projects use libraries for reusable source code. Often, these libraries should be placed in a dedicated subdirectory, such as is shown below with the library named <code>basicmath</code>:",Ke,Ns,Fa=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">├── build</span></span>
<span class="line"><span style="color: #abb2bf">│   ├── CMakeCache.txt</span></span>
<span class="line"><span style="color: #abb2bf">│   ├── CMakeFiles</span></span>
<span class="line"><span style="color: #abb2bf">│   ├── Makefile</span></span>
<span class="line"><span style="color: #abb2bf">│   └── cmake_install.cmake</span></span>
<span class="line"><span style="color: #abb2bf">├── lib</span></span>
<span class="line"><span style="color: #abb2bf">│   ├── basicmath</span></span>
<span class="line"><span style="color: #abb2bf">│   │   ├── include</span></span>
<span class="line"><span style="color: #abb2bf">│   │   │   └── basicmath.h</span></span>
<span class="line"><span style="color: #abb2bf">│   │   ├── src</span></span>
<span class="line"><span style="color: #abb2bf">│   │   │   ├── basicmath.cpp</span></span>
<span class="line"><span style="color: #abb2bf">│   │   │   └── CMakeLists.txt</span></span>
<span class="line"><span style="color: #abb2bf">│   │   └── CMakeLists.txt</span></span>
<span class="line"><span style="color: #abb2bf">│   └── CMakeLists.txt</span></span>
<span class="line"><span style="color: #abb2bf">├── CMakeLists.txt</span></span>
<span class="line"><span style="color: #abb2bf">└── main.cpp</span></span></code></pre>`,Is,O,Ol="Notice how each subdirectory of the library contains a <code>CMakeLists.txt</code> file. This is needed for nested source code directories, but most of these files will only contain one line to point to the next directory in the chain.",Ye,q,ql="Below are the four <code>CMakeLists.txt</code> files listed from top to bottom in the directory nest. The high-level file contains most of the project information, including the target library details. The intermediary files contain one command to point to the relevant subdirectory, and the last contains the library definition as well as a pointer to the <code>include</code> directory will the header files.",Je,Ss,_a=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># adder/CMakeLists.txt</span></span>
<span class="line"><span style="color: #C678DD">cmake_minimum_required</span><span style="color: #ABB2BF">(VERSION 3.27.4)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">project</span><span style="color: #ABB2BF">(adder VERSION 1.0.0 LANGUAGES C CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">add_subdirectory</span><span style="color: #ABB2BF">(lib)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">add_executable</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span><span style="color: #ABB2BF"> main.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">target_link_libraries</span><span style="color: #ABB2BF">(adder PUBLIC BasicMath)</span></span></code></pre>`,Rs,Os,Da=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># adder/lib/CMakeLists.txt</span></span>
<span class="line"><span style="color: #C678DD">add_subdirectory</span><span style="color: #ABB2BF">(basicmath)</span></span></code></pre>`,qs,Xs,ka=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># adder/lib/basicmath/CMakeLists.txt</span></span>
<span class="line"><span style="color: #C678DD">add_subdirectory</span><span style="color: #ABB2BF">(src)</span></span></code></pre>`,gs,js,ha=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># adder/lib/basicmath/src/CMakeLists.txt</span></span>
<span class="line"><span style="color: #C678DD">add_library</span><span style="color: #ABB2BF">(BasicMath STATIC adder.cpp)</span></span>
<span class="line"><span style="color: #C678DD">target_include_directories</span><span style="color: #ABB2BF">(BasicMath PUBLIC </span><span style="color: #98C379">&quot;../include&quot;</span><span style="color: #ABB2BF">)</span></span></code></pre>`,Us,X,Xl="Below is the source code for reference:",We,Vs,xa=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/* basicmath.h */</span></span>
<span class="line"><span style="color: #C678DD">#pragma</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">once</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">namespace</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">basicmath</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">add</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">b</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">add</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">b</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre>`,Gs,zs,va=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/* basicmath.cpp */</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;basicmath.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">basicmath</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">add</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">b</span><span style="color: #ABB2BF">) &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (a </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> b);</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">basicmath</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">add</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">b</span><span style="color: #ABB2BF">) &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (a </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> b);</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre>`,Ks,Ys,wa=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/* main.cpp */</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;basicmath.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout, std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;2.5 + 2.5 = &quot;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> basicmath::</span><span style="color: #61AFEF">add</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">2.5</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">2.5</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre>`,Js,g,gl="To test this project configuration, execute the following commands, assuming that the build process has been completed at least once:",Qe,Ws,Ma=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">build</span></span>
<span class="line"><span style="color: #61AFEF">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--build</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">.</span></span>
<span class="line"><span style="color: #61AFEF">make</span></span>
<span class="line"><span style="color: #61AFEF">./adder</span></span></code></pre>`,Qs,j,jl="Optionally, you can choose to only target the library during the build routine, which may help you pinpoint build errors:",Ze,Zs,Ea='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--build</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">.</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--target</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">basicmath</span></span></code></pre>',se,U,sl,V,Ul="In CMake, variables can be defined in the top-level <code>CMakeLists.txt</code> file and accessed in all subdirectories. By convention, variable names are written in all caps. To create a variable, use the <code>set</code> function to define its name and value, separated by a space:",el,ee,La='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(LIBRARY_NAME BasicMath)</span></span></code></pre>',le,G,Vl="If we add this line to the top-level CMake file, then we can reference the variable name for our library in <code>adder/lib/basicmath/src/CMakeLists.txt</code>:",ll,ae,Ta=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># adder/CMakeLists.txt</span></span>
<span class="line"><span style="color: #C678DD">cmake_minimum_required</span><span style="color: #ABB2BF">(VERSION 3.27.4)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">project</span><span style="color: #ABB2BF">(adder VERSION 1.0.0 LANGUAGES C CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(LIBRARY_NAME BasicMath)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">add_subdirectory</span><span style="color: #ABB2BF">(lib)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">add_executable</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span><span style="color: #ABB2BF"> main.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">target_link_libraries</span><span style="color: #ABB2BF">(adder PUBLIC BasicMath)</span></span></code></pre>`,ne,te,$a=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># adder/lib/basicmath/src/CMakeLists.txt</span></span>
<span class="line"><span style="color: #C678DD">add_library</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;LIBRARY_NAME&#125;</span><span style="color: #ABB2BF"> STATIC adder.cpp)</span></span>
<span class="line"><span style="color: #C678DD">target_include_directories</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;LIBRARY_NAME&#125;</span><span style="color: #ABB2BF"> PUBLIC </span><span style="color: #98C379">&quot;../include&quot;</span><span style="color: #ABB2BF">)</span></span></code></pre>`,pe,z,Gl="There are also common CMake variables, such as <code>PROJECT_NAME</code> and <code>CMAKE_CXX_STANDARD</code>, that have already been defined. Some other common configuration variables include:",al,oe,Ha=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF">)  </span><span style="color: #7F848E; font-style: italic"># Force compiler to implement stated standard</span></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_EXTENSIONS        </span><span style="color: #C678DD">OFF</span><span style="color: #ABB2BF">) </span><span style="color: #7F848E; font-style: italic"># Prevent non-standard language extensions</span></span></code></pre>`,ce,K,nl,Y,zl="CMake options are similar to variables, but only hold ON/OFF (True/False) values. Options defined in the CMake file can be used with conditional statements to control function execution, e.g., whether or not to compile the executable:",tl,ie,Pa=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># adder/CMakeLists.txt</span></span>
<span class="line"><span style="color: #C678DD">cmake_minimum_required</span><span style="color: #ABB2BF">(VERSION 3.27.4)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">project</span><span style="color: #ABB2BF">(adder VERSION 1.0.0 LANGUAGES C CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_STANDARD          17)</span></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_EXTENSIONS        </span><span style="color: #C678DD">OFF</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(LIBRARY_NAME                BasicMath)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># include text hint</span></span>
<span class="line"><span style="color: #C678DD">option</span><span style="color: #ABB2BF">(COMPILE_EXECUTABLE </span><span style="color: #98C379">&quot;Choose whether to compile executable&quot;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">OFF</span><span style="color: #ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">add_subdirectory</span><span style="color: #ABB2BF">(lib)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (COMPILE_EXECUTABLE)</span></span>
<span class="line"><span style="color: #C678DD">    add_executable</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span><span style="color: #ABB2BF"> main.cpp)</span></span>
<span class="line"><span style="color: #C678DD">else</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic"># notify user in console during cmake configuration step</span></span>
<span class="line"><span style="color: #C678DD">    message</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Skipping executable compilation&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #C678DD">endif</span><span style="color: #ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">target_link_libraries</span><span style="color: #ABB2BF">(adder PUBLIC BasicMath)</span></span></code></pre>`,re,J,Kl="Now, the option variable <code>COMPILE_EXECUTABLE</code> can be toggled in the console during the CMake configuration step:",pl,Be,Na=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">build</span></span>
<span class="line"><span style="color: #61AFEF">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">..</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-DCOMPILE_EXECUTABLE=ON</span></span></code></pre>`,ye,W,ol,Q,cl,Z,il,ss,Yl="To recreate the build directory in Unix systems:",rl,de,Ia=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">rm</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-rf</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">build</span></span>
<span class="line"><span style="color: #61AFEF">mkdir</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">build</span></span></code></pre>`,ue,es,Jl="In Windows:",Bl,Ce,Sa=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">Remove-Item</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">Recurse </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">Force build</span></span>
<span class="line"><span style="color: #56B6C2">New-Item</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">Path . </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">Name </span><span style="color: #98C379">&quot;build&quot;</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">ItemType </span><span style="color: #98C379">&quot;directory&quot;</span></span></code></pre>`,me,ls,Wl="Optionally, you can automate these steps in a Makefile:",yl,fe,Ra=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># adder/Makefile</span></span>
<span class="line"><span style="color: #61AFEF">prepare</span><span style="color: #ABB2BF">:</span></span>
<span class="line"><span style="color: #E5C07B">    rm -rf build</span></span>
<span class="line"><span style="color: #E5C07B">    mkdir build</span></span></code></pre>`,be,as,Ql="To execute these commands:",dl,Ae,Oa='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">make</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">prepare</span></span></code></pre>',Fe,ns,Zl="Generators",ul,ts,sa="CMake generators are the build systems used under the hood. For Unix systems, which include Linux (GCC) and macOS (Clang), the default generator is Makefiles, while for Windows (MSVC) the default is Microsoft Visual Studio Solution. The project generator can be configured with the <code>-G</code> parameter:",Cl,ps,ea="Unix systems:",ml,_e,qa='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-S</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">..</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-B</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">.</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-G</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;Unix Makefiles&quot;</span></span></code></pre>',De,os,la="Windows:",fl,ke,Xa='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">cmake </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">S .. </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">B . </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">G </span><span style="color: #98C379">&quot;Visual Studio 16 2019&quot;</span><span style="color: #ABB2BF"> </span><span style="color: #7F848E; font-style: italic"># specify MSVC version</span></span></code></pre>',he,cs,aa="Build types",bl,is,na="CMake offers a few different build types, the two most common being <code>Debug</code> to <code>Release</code>. In <code>Release</code> mode, the compiler performs extra operations to optimize the build. To specify the build type:",Al,xe,ga=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># inside build directory</span></span>
<span class="line"><span style="color: #61AFEF">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">..</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-DCMAKE_BUILD_TYPE=Release</span></span></code></pre>`,ve,Fl;return A=new rs({props:{str:"Introduction"}}),_=new rs({props:{str:"Installation"}}),v=new rs({props:{str:"Basics"}}),S=new rs({props:{str:"Libraries"}}),U=new rs({props:{str:"Variables"}}),K=new rs({props:{str:"Options"}}),W=new pa({props:{tagtype:"warning",msg:"Make sure not to include any space between the command line parameter (-D) and the option variable name."}}),Q=new rs({props:{str:"Command line options"}}),Z=new pa({props:{tagtype:"info",msg:"You may wish to remove the build directory before subsequent project configurations to guarantee that new changes take effect."}}),{c(){B=p("h2"),B.textContent=_l,we=n(),b=p("ul"),b.innerHTML=Dl,Me=n(),y(A.$$.fragment),Ee=n(),F=p("p"),F.innerHTML=kl,Le=n(),y(_.$$.fragment),Te=n(),D=p("p"),D.textContent=hl,$e=n(),k=p("p"),k.innerHTML=xl,He=n(),Bs=new i(!1),ys=n(),h=p("p"),h.innerHTML=vl,Pe=n(),ds=new i(!1),us=n(),x=p("p"),x.innerHTML=wl,Ne=n(),Cs=new i(!1),ms=n(),y(v.$$.fragment),Ie=n(),w=p("p"),w.innerHTML=Ml,Se=n(),fs=new i(!1),bs=n(),M=p("p"),M.innerHTML=El,Re=n(),As=new i(!1),Fs=n(),E=p("p"),E.innerHTML=Ll,Oe=n(),_s=new i(!1),Ds=n(),L=p("p"),L.innerHTML=Tl,qe=n(),ks=new i(!1),hs=n(),T=p("p"),T.textContent=$l,Xe=n(),xs=new i(!1),vs=n(),$=p("p"),$.innerHTML=Hl,ge=n(),ws=new i(!1),Ms=n(),H=p("p"),H.innerHTML=Pl,je=n(),P=p("p"),P.innerHTML=Nl,Ue=n(),Es=new i(!1),Ls=n(),N=p("p"),N.innerHTML=Il,Ve=n(),Ts=new i(!1),$s=n(),I=p("p"),I.textContent=Sl,Ge=n(),Hs=new i(!1),Ps=n(),y(S.$$.fragment),ze=n(),R=p("p"),R.innerHTML=Rl,Ke=n(),Ns=new i(!1),Is=n(),O=p("p"),O.innerHTML=Ol,Ye=n(),q=p("p"),q.innerHTML=ql,Je=n(),Ss=new i(!1),Rs=n(),Os=new i(!1),qs=n(),Xs=new i(!1),gs=n(),js=new i(!1),Us=n(),X=p("p"),X.textContent=Xl,We=n(),Vs=new i(!1),Gs=n(),zs=new i(!1),Ks=n(),Ys=new i(!1),Js=n(),g=p("p"),g.textContent=gl,Qe=n(),Ws=new i(!1),Qs=n(),j=p("p"),j.textContent=jl,Ze=n(),Zs=new i(!1),se=n(),y(U.$$.fragment),sl=n(),V=p("p"),V.innerHTML=Ul,el=n(),ee=new i(!1),le=n(),G=p("p"),G.innerHTML=Vl,ll=n(),ae=new i(!1),ne=n(),te=new i(!1),pe=n(),z=p("p"),z.innerHTML=Gl,al=n(),oe=new i(!1),ce=n(),y(K.$$.fragment),nl=n(),Y=p("p"),Y.textContent=zl,tl=n(),ie=new i(!1),re=n(),J=p("p"),J.innerHTML=Kl,pl=n(),Be=new i(!1),ye=n(),y(W.$$.fragment),ol=n(),y(Q.$$.fragment),cl=n(),y(Z.$$.fragment),il=n(),ss=p("p"),ss.textContent=Yl,rl=n(),de=new i(!1),ue=n(),es=p("p"),es.textContent=Jl,Bl=n(),Ce=new i(!1),me=n(),ls=p("p"),ls.textContent=Wl,yl=n(),fe=new i(!1),be=n(),as=p("p"),as.textContent=Ql,dl=n(),Ae=new i(!1),Fe=n(),ns=p("h3"),ns.textContent=Zl,ul=n(),ts=p("p"),ts.innerHTML=sa,Cl=n(),ps=p("p"),ps.textContent=ea,ml=n(),_e=new i(!1),De=n(),os=p("p"),os.textContent=la,fl=n(),ke=new i(!1),he=n(),cs=p("h3"),cs.textContent=aa,bl=n(),is=p("p"),is.innerHTML=na,Al=n(),xe=new i(!1),ve=ta(),this.h()},l(s){B=o(s,"H2",{"data-svelte-h":!0}),c(B)!=="svelte-jpxk5s"&&(B.textContent=_l),we=t(s),b=o(s,"UL",{"data-svelte-h":!0}),c(b)!=="svelte-jkbyuj"&&(b.innerHTML=Dl),Me=t(s),d(A.$$.fragment,s),Ee=t(s),F=o(s,"P",{"data-svelte-h":!0}),c(F)!=="svelte-1pr33fw"&&(F.innerHTML=kl),Le=t(s),d(_.$$.fragment,s),Te=t(s),D=o(s,"P",{"data-svelte-h":!0}),c(D)!=="svelte-1r00eh7"&&(D.textContent=hl),$e=t(s),k=o(s,"P",{"data-svelte-h":!0}),c(k)!=="svelte-1nermpu"&&(k.innerHTML=xl),He=t(s),Bs=r(s,!1),ys=t(s),h=o(s,"P",{"data-svelte-h":!0}),c(h)!=="svelte-1m1hzlg"&&(h.innerHTML=vl),Pe=t(s),ds=r(s,!1),us=t(s),x=o(s,"P",{"data-svelte-h":!0}),c(x)!=="svelte-rurumh"&&(x.innerHTML=wl),Ne=t(s),Cs=r(s,!1),ms=t(s),d(v.$$.fragment,s),Ie=t(s),w=o(s,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1r498ka"&&(w.innerHTML=Ml),Se=t(s),fs=r(s,!1),bs=t(s),M=o(s,"P",{"data-svelte-h":!0}),c(M)!=="svelte-16rjz4n"&&(M.innerHTML=El),Re=t(s),As=r(s,!1),Fs=t(s),E=o(s,"P",{"data-svelte-h":!0}),c(E)!=="svelte-bess08"&&(E.innerHTML=Ll),Oe=t(s),_s=r(s,!1),Ds=t(s),L=o(s,"P",{"data-svelte-h":!0}),c(L)!=="svelte-1ianm7x"&&(L.innerHTML=Tl),qe=t(s),ks=r(s,!1),hs=t(s),T=o(s,"P",{"data-svelte-h":!0}),c(T)!=="svelte-ss2ft7"&&(T.textContent=$l),Xe=t(s),xs=r(s,!1),vs=t(s),$=o(s,"P",{"data-svelte-h":!0}),c($)!=="svelte-gzlsh7"&&($.innerHTML=Hl),ge=t(s),ws=r(s,!1),Ms=t(s),H=o(s,"P",{"data-svelte-h":!0}),c(H)!=="svelte-1stwohn"&&(H.innerHTML=Pl),je=t(s),P=o(s,"P",{"data-svelte-h":!0}),c(P)!=="svelte-obf359"&&(P.innerHTML=Nl),Ue=t(s),Es=r(s,!1),Ls=t(s),N=o(s,"P",{"data-svelte-h":!0}),c(N)!=="svelte-3ujk"&&(N.innerHTML=Il),Ve=t(s),Ts=r(s,!1),$s=t(s),I=o(s,"P",{"data-svelte-h":!0}),c(I)!=="svelte-h63w2k"&&(I.textContent=Sl),Ge=t(s),Hs=r(s,!1),Ps=t(s),d(S.$$.fragment,s),ze=t(s),R=o(s,"P",{"data-svelte-h":!0}),c(R)!=="svelte-13q6h5h"&&(R.innerHTML=Rl),Ke=t(s),Ns=r(s,!1),Is=t(s),O=o(s,"P",{"data-svelte-h":!0}),c(O)!=="svelte-383yfb"&&(O.innerHTML=Ol),Ye=t(s),q=o(s,"P",{"data-svelte-h":!0}),c(q)!=="svelte-nso5p0"&&(q.innerHTML=ql),Je=t(s),Ss=r(s,!1),Rs=t(s),Os=r(s,!1),qs=t(s),Xs=r(s,!1),gs=t(s),js=r(s,!1),Us=t(s),X=o(s,"P",{"data-svelte-h":!0}),c(X)!=="svelte-13nuwsm"&&(X.textContent=Xl),We=t(s),Vs=r(s,!1),Gs=t(s),zs=r(s,!1),Ks=t(s),Ys=r(s,!1),Js=t(s),g=o(s,"P",{"data-svelte-h":!0}),c(g)!=="svelte-1u06f0n"&&(g.textContent=gl),Qe=t(s),Ws=r(s,!1),Qs=t(s),j=o(s,"P",{"data-svelte-h":!0}),c(j)!=="svelte-1v8gj8f"&&(j.textContent=jl),Ze=t(s),Zs=r(s,!1),se=t(s),d(U.$$.fragment,s),sl=t(s),V=o(s,"P",{"data-svelte-h":!0}),c(V)!=="svelte-hyalg4"&&(V.innerHTML=Ul),el=t(s),ee=r(s,!1),le=t(s),G=o(s,"P",{"data-svelte-h":!0}),c(G)!=="svelte-yvgqgu"&&(G.innerHTML=Vl),ll=t(s),ae=r(s,!1),ne=t(s),te=r(s,!1),pe=t(s),z=o(s,"P",{"data-svelte-h":!0}),c(z)!=="svelte-1033iko"&&(z.innerHTML=Gl),al=t(s),oe=r(s,!1),ce=t(s),d(K.$$.fragment,s),nl=t(s),Y=o(s,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-1ipsasu"&&(Y.textContent=zl),tl=t(s),ie=r(s,!1),re=t(s),J=o(s,"P",{"data-svelte-h":!0}),c(J)!=="svelte-10m9owa"&&(J.innerHTML=Kl),pl=t(s),Be=r(s,!1),ye=t(s),d(W.$$.fragment,s),ol=t(s),d(Q.$$.fragment,s),cl=t(s),d(Z.$$.fragment,s),il=t(s),ss=o(s,"P",{"data-svelte-h":!0}),c(ss)!=="svelte-mr7y55"&&(ss.textContent=Yl),rl=t(s),de=r(s,!1),ue=t(s),es=o(s,"P",{"data-svelte-h":!0}),c(es)!=="svelte-l2dlsg"&&(es.textContent=Jl),Bl=t(s),Ce=r(s,!1),me=t(s),ls=o(s,"P",{"data-svelte-h":!0}),c(ls)!=="svelte-zuxh4k"&&(ls.textContent=Wl),yl=t(s),fe=r(s,!1),be=t(s),as=o(s,"P",{"data-svelte-h":!0}),c(as)!=="svelte-b0r96z"&&(as.textContent=Ql),dl=t(s),Ae=r(s,!1),Fe=t(s),ns=o(s,"H3",{"data-svelte-h":!0}),c(ns)!=="svelte-1p6otru"&&(ns.textContent=Zl),ul=t(s),ts=o(s,"P",{"data-svelte-h":!0}),c(ts)!=="svelte-1n3zlz5"&&(ts.innerHTML=sa),Cl=t(s),ps=o(s,"P",{"data-svelte-h":!0}),c(ps)!=="svelte-1ka1kdu"&&(ps.textContent=ea),ml=t(s),_e=r(s,!1),De=t(s),os=o(s,"P",{"data-svelte-h":!0}),c(os)!=="svelte-1cz5ld7"&&(os.textContent=la),fl=t(s),ke=r(s,!1),he=t(s),cs=o(s,"H3",{"data-svelte-h":!0}),c(cs)!=="svelte-1dmxq1t"&&(cs.textContent=aa),bl=t(s),is=o(s,"P",{"data-svelte-h":!0}),c(is)!=="svelte-kow2hy"&&(is.innerHTML=na),Al=t(s),xe=r(s,!1),ve=ta(),this.h()},h(){Bs.a=ys,ds.a=us,Cs.a=ms,fs.a=bs,As.a=Fs,_s.a=Ds,ks.a=hs,xs.a=vs,ws.a=Ms,Es.a=Ls,Ts.a=$s,Hs.a=Ps,Ns.a=Is,Ss.a=Rs,Os.a=qs,Xs.a=gs,js.a=Us,Vs.a=Gs,zs.a=Ks,Ys.a=Js,Ws.a=Qs,Zs.a=se,ee.a=le,ae.a=ne,te.a=pe,oe.a=ce,ie.a=re,Be.a=ye,de.a=ue,Ce.a=me,fe.a=be,Ae.a=Fe,_e.a=De,ke.a=he,xe.a=ve},m(s,e){l(s,B,e),l(s,we,e),l(s,b,e),l(s,Me,e),u(A,s,e),l(s,Ee,e),l(s,F,e),l(s,Le,e),u(_,s,e),l(s,Te,e),l(s,D,e),l(s,$e,e),l(s,k,e),l(s,He,e),Bs.m(ca,s,e),l(s,ys,e),l(s,h,e),l(s,Pe,e),ds.m(ia,s,e),l(s,us,e),l(s,x,e),l(s,Ne,e),Cs.m(ra,s,e),l(s,ms,e),u(v,s,e),l(s,Ie,e),l(s,w,e),l(s,Se,e),fs.m(Ba,s,e),l(s,bs,e),l(s,M,e),l(s,Re,e),As.m(ya,s,e),l(s,Fs,e),l(s,E,e),l(s,Oe,e),_s.m(da,s,e),l(s,Ds,e),l(s,L,e),l(s,qe,e),ks.m(ua,s,e),l(s,hs,e),l(s,T,e),l(s,Xe,e),xs.m(Ca,s,e),l(s,vs,e),l(s,$,e),l(s,ge,e),ws.m(ma,s,e),l(s,Ms,e),l(s,H,e),l(s,je,e),l(s,P,e),l(s,Ue,e),Es.m(fa,s,e),l(s,Ls,e),l(s,N,e),l(s,Ve,e),Ts.m(ba,s,e),l(s,$s,e),l(s,I,e),l(s,Ge,e),Hs.m(Aa,s,e),l(s,Ps,e),u(S,s,e),l(s,ze,e),l(s,R,e),l(s,Ke,e),Ns.m(Fa,s,e),l(s,Is,e),l(s,O,e),l(s,Ye,e),l(s,q,e),l(s,Je,e),Ss.m(_a,s,e),l(s,Rs,e),Os.m(Da,s,e),l(s,qs,e),Xs.m(ka,s,e),l(s,gs,e),js.m(ha,s,e),l(s,Us,e),l(s,X,e),l(s,We,e),Vs.m(xa,s,e),l(s,Gs,e),zs.m(va,s,e),l(s,Ks,e),Ys.m(wa,s,e),l(s,Js,e),l(s,g,e),l(s,Qe,e),Ws.m(Ma,s,e),l(s,Qs,e),l(s,j,e),l(s,Ze,e),Zs.m(Ea,s,e),l(s,se,e),u(U,s,e),l(s,sl,e),l(s,V,e),l(s,el,e),ee.m(La,s,e),l(s,le,e),l(s,G,e),l(s,ll,e),ae.m(Ta,s,e),l(s,ne,e),te.m($a,s,e),l(s,pe,e),l(s,z,e),l(s,al,e),oe.m(Ha,s,e),l(s,ce,e),u(K,s,e),l(s,nl,e),l(s,Y,e),l(s,tl,e),ie.m(Pa,s,e),l(s,re,e),l(s,J,e),l(s,pl,e),Be.m(Na,s,e),l(s,ye,e),u(W,s,e),l(s,ol,e),u(Q,s,e),l(s,cl,e),u(Z,s,e),l(s,il,e),l(s,ss,e),l(s,rl,e),de.m(Ia,s,e),l(s,ue,e),l(s,es,e),l(s,Bl,e),Ce.m(Sa,s,e),l(s,me,e),l(s,ls,e),l(s,yl,e),fe.m(Ra,s,e),l(s,be,e),l(s,as,e),l(s,dl,e),Ae.m(Oa,s,e),l(s,Fe,e),l(s,ns,e),l(s,ul,e),l(s,ts,e),l(s,Cl,e),l(s,ps,e),l(s,ml,e),_e.m(qa,s,e),l(s,De,e),l(s,os,e),l(s,fl,e),ke.m(Xa,s,e),l(s,he,e),l(s,cs,e),l(s,bl,e),l(s,is,e),l(s,Al,e),xe.m(ga,s,e),l(s,ve,e),Fl=!0},p:Ua,i(s){Fl||(C(A.$$.fragment,s),C(_.$$.fragment,s),C(v.$$.fragment,s),C(S.$$.fragment,s),C(U.$$.fragment,s),C(K.$$.fragment,s),C(W.$$.fragment,s),C(Q.$$.fragment,s),C(Z.$$.fragment,s),Fl=!0)},o(s){m(A.$$.fragment,s),m(_.$$.fragment,s),m(v.$$.fragment,s),m(S.$$.fragment,s),m(U.$$.fragment,s),m(K.$$.fragment,s),m(W.$$.fragment,s),m(Q.$$.fragment,s),m(Z.$$.fragment,s),Fl=!1},d(s){s&&(a(B),a(we),a(b),a(Me),a(Ee),a(F),a(Le),a(Te),a(D),a($e),a(k),a(He),Bs.d(),a(ys),a(h),a(Pe),ds.d(),a(us),a(x),a(Ne),Cs.d(),a(ms),a(Ie),a(w),a(Se),fs.d(),a(bs),a(M),a(Re),As.d(),a(Fs),a(E),a(Oe),_s.d(),a(Ds),a(L),a(qe),ks.d(),a(hs),a(T),a(Xe),xs.d(),a(vs),a($),a(ge),ws.d(),a(Ms),a(H),a(je),a(P),a(Ue),Es.d(),a(Ls),a(N),a(Ve),Ts.d(),a($s),a(I),a(Ge),Hs.d(),a(Ps),a(ze),a(R),a(Ke),Ns.d(),a(Is),a(O),a(Ye),a(q),a(Je),Ss.d(),a(Rs),Os.d(),a(qs),Xs.d(),a(gs),js.d(),a(Us),a(X),a(We),Vs.d(),a(Gs),zs.d(),a(Ks),Ys.d(),a(Js),a(g),a(Qe),Ws.d(),a(Qs),a(j),a(Ze),Zs.d(),a(se),a(sl),a(V),a(el),ee.d(),a(le),a(G),a(ll),ae.d(),a(ne),te.d(),a(pe),a(z),a(al),oe.d(),a(ce),a(nl),a(Y),a(tl),ie.d(),a(re),a(J),a(pl),Be.d(),a(ye),a(ol),a(cl),a(il),a(ss),a(rl),de.d(),a(ue),a(es),a(Bl),Ce.d(),a(me),a(ls),a(yl),fe.d(),a(be),a(as),a(dl),Ae.d(),a(Fe),a(ns),a(ul),a(ts),a(Cl),a(ps),a(ml),_e.d(),a(De),a(os),a(fl),ke.d(),a(he),a(cs),a(bl),a(is),a(Al),a(ve),xe.d()),f(A,s),f(_,s),f(v,s),f(S,s),f(U,s),f(K,s),f(W,s),f(Q,s),f(Z,s)}}}const Qa={title:"Building C/C++ projects with CMake",description:"Leverage CMake to automate the source code build process",date:"2023-08-15",image:"/images/macbook-code.jpg",categories:["CMake"],published:!0};class Za extends Va{constructor(B){super(),Ga(this,B,null,za,ja,{})}}export{Za as default,Qa as metadata};
