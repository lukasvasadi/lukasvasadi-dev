import{s as it,n as He}from"./scheduler.be0e0057.js";import{S as ut,i as rt,g as l,s as p,H as i,h as n,D as c,c as o,j as u,G as r,f as t,k as d,a as s}from"./index.c7c9b348.js";function dt(Ye){let m,Te="Contents",U,k,Le='<li><a href="#introduction">Introduction</a></li> <li><a href="#installation">Installation</a></li> <li><a href="#basics">Basics</a></li>',D,f,ye='<a id="introduction">Introduction</a>',G,h,Ee="CMake is an open-source, cross-platform automation tool for generating C/C++ Makefiles, which can then be used to build the source. It has become the <em>de facto</em> build system for the developer community as well as major companies, such as Qt and ST Microelectronics.",J,_,ge='<a id="installation">Installation</a>',V,v,Pe="See below for platform-specific commands to install the CMake toolchain. The rest of the tutorial will use Unix-style commands, but these should be directly transferable to Windows systems.",W,b,Re="<strong>Windows (Chocolatey):</strong>",$,w,F,Ze='<code class="language-ps1">choco install cmake</code>',Q,M,je="<strong>macOS (Homebrew):</strong>",K,C,X,et='<code class="language-zsh">brew install cmake</code>',Y,x,Ie="<strong>Linux:</strong>",Z,H,ee,tt='<code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> cmake</code>',te,T,Se='<a id="basics">Basics</a>',ae,L,Ae="CMake relies on a top-level file called <code>CMakeLists.txt</code>, which should be created in the same directory as the source. (Remember, it is good practice to separate source code and binary files.) To demonstrate a CMake project, we can create a <code>HelloCMake</code> directory, with <code>src</code> and <code>build</code> subdirectories, under <code>home</code>:",se,y,le,at='<code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/HelloCMake/src ~/HelloCMake/build</code>',ne,E,ze="Under the <code>src</code> directory, create a <code>main.cpp</code> file:",pe,g,oe,st=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>iostream<span class="token operator">></span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hey, CMake!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ce,P,Ne="Add a <code>CMakeLists.txt</code> file (use the CMake version output from <code>cmake --version</code>):",ie,R,ue,lt=`<code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.27.4</span><span class="token punctuation">)</span>

<span class="token keyword">project</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> main.cpp<span class="token punctuation">)</span></code>`,re,j,qe="To generate the Makefile, which contains the recipe to build the source, run the <code>cmake</code> command and specify the locations of the <code>src</code> and <code>build</code> directories:",de,I,me,nt='<code class="language-bash">cmake <span class="token parameter variable">-S</span> ~/HelloCMake/src <span class="token parameter variable">-B</span> ~/HelloCMake/build</code>',ke,S,Oe="After running that command, the project folder should appear as follows:",fe,A,he,pt=`<code class="language-undefined">├── build
│   ├── CMakeCache.txt
│   ├── CMakeFiles
│   ├── Makefile
│   └── cmake_install.cmake
└── src
    ├── CMakeLists.txt
    └── main.cpp</code>`,_e,z,Be="Now run the <code>make</code> command inside the build folder:",ve,N,be,ot=`<code class="language-bash"><span class="token builtin class-name">cd</span> ~/HelloCMake/build
<span class="token function">make</span></code>`,we,q,Ue="At this point, if the build was successful, there will be an executable called <code>hello</code>, which can be run with <code>./hello</code>.",Me,O,De="In addition to specifying the CMake version requirements, project name, and source target, CMake provides an install keyword to denote the executable target directory. This feature is especially helpful for Linux users who may want their program to be accessible from the command line. As an example, the below CMake file will place our <code>hello</code> exuctable into the system <code>bin</code> folder:",Ce,B,xe,ct=`<code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.27.4</span><span class="token punctuation">)</span>

<span class="token keyword">project</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> main.cpp<span class="token punctuation">)</span>

<span class="token keyword">install</span><span class="token punctuation">(</span>TARGET hello DESTINATION bin<span class="token punctuation">)</span></code>`;return{c(){m=l("h2"),m.textContent=Te,U=p(),k=l("ul"),k.innerHTML=Le,D=p(),f=l("h2"),f.innerHTML=ye,G=p(),h=l("p"),h.innerHTML=Ee,J=p(),_=l("h2"),_.innerHTML=ge,V=p(),v=l("p"),v.textContent=Pe,W=p(),b=l("p"),b.innerHTML=Re,$=p(),w=l("pre"),F=new i(!1),Q=p(),M=l("p"),M.innerHTML=je,K=p(),C=l("pre"),X=new i(!1),Y=p(),x=l("p"),x.innerHTML=Ie,Z=p(),H=l("pre"),ee=new i(!1),te=p(),T=l("h2"),T.innerHTML=Se,ae=p(),L=l("p"),L.innerHTML=Ae,se=p(),y=l("pre"),le=new i(!1),ne=p(),E=l("p"),E.innerHTML=ze,pe=p(),g=l("pre"),oe=new i(!1),ce=p(),P=l("p"),P.innerHTML=Ne,ie=p(),R=l("pre"),ue=new i(!1),re=p(),j=l("p"),j.innerHTML=qe,de=p(),I=l("pre"),me=new i(!1),ke=p(),S=l("p"),S.textContent=Oe,fe=p(),A=l("pre"),he=new i(!1),_e=p(),z=l("p"),z.innerHTML=Be,ve=p(),N=l("pre"),be=new i(!1),we=p(),q=l("p"),q.innerHTML=Ue,Me=p(),O=l("p"),O.innerHTML=De,Ce=p(),B=l("pre"),xe=new i(!1),this.h()},l(e){m=n(e,"H2",{"data-svelte-h":!0}),c(m)!=="svelte-jpxk5s"&&(m.textContent=Te),U=o(e),k=n(e,"UL",{"data-svelte-h":!0}),c(k)!=="svelte-1ywwmzp"&&(k.innerHTML=Le),D=o(e),f=n(e,"H2",{"data-svelte-h":!0}),c(f)!=="svelte-117zo8l"&&(f.innerHTML=ye),G=o(e),h=n(e,"P",{"data-svelte-h":!0}),c(h)!=="svelte-1pr33fw"&&(h.innerHTML=Ee),J=o(e),_=n(e,"H2",{"data-svelte-h":!0}),c(_)!=="svelte-1dz9mr"&&(_.innerHTML=ge),V=o(e),v=n(e,"P",{"data-svelte-h":!0}),c(v)!=="svelte-1f74u61"&&(v.textContent=Pe),W=o(e),b=n(e,"P",{"data-svelte-h":!0}),c(b)!=="svelte-1nermpu"&&(b.innerHTML=Re),$=o(e),w=n(e,"PRE",{class:!0});var a=u(w);F=r(a,!1),a.forEach(t),Q=o(e),M=n(e,"P",{"data-svelte-h":!0}),c(M)!=="svelte-1m1hzlg"&&(M.innerHTML=je),K=o(e),C=n(e,"PRE",{class:!0});var Ge=u(C);X=r(Ge,!1),Ge.forEach(t),Y=o(e),x=n(e,"P",{"data-svelte-h":!0}),c(x)!=="svelte-rurumh"&&(x.innerHTML=Ie),Z=o(e),H=n(e,"PRE",{class:!0});var Je=u(H);ee=r(Je,!1),Je.forEach(t),te=o(e),T=n(e,"H2",{"data-svelte-h":!0}),c(T)!=="svelte-rxkq8j"&&(T.innerHTML=Se),ae=o(e),L=n(e,"P",{"data-svelte-h":!0}),c(L)!=="svelte-1dxlr2h"&&(L.innerHTML=Ae),se=o(e),y=n(e,"PRE",{class:!0});var Ve=u(y);le=r(Ve,!1),Ve.forEach(t),ne=o(e),E=n(e,"P",{"data-svelte-h":!0}),c(E)!=="svelte-1crpdwr"&&(E.innerHTML=ze),pe=o(e),g=n(e,"PRE",{class:!0});var We=u(g);oe=r(We,!1),We.forEach(t),ce=o(e),P=n(e,"P",{"data-svelte-h":!0}),c(P)!=="svelte-bess08"&&(P.innerHTML=Ne),ie=o(e),R=n(e,"PRE",{class:!0});var $e=u(R);ue=r($e,!1),$e.forEach(t),re=o(e),j=n(e,"P",{"data-svelte-h":!0}),c(j)!=="svelte-1ianm7x"&&(j.innerHTML=qe),de=o(e),I=n(e,"PRE",{class:!0});var Fe=u(I);me=r(Fe,!1),Fe.forEach(t),ke=o(e),S=n(e,"P",{"data-svelte-h":!0}),c(S)!=="svelte-ss2ft7"&&(S.textContent=Oe),fe=o(e),A=n(e,"PRE",{class:!0});var Qe=u(A);he=r(Qe,!1),Qe.forEach(t),_e=o(e),z=n(e,"P",{"data-svelte-h":!0}),c(z)!=="svelte-gzlsh7"&&(z.innerHTML=Be),ve=o(e),N=n(e,"PRE",{class:!0});var Ke=u(N);be=r(Ke,!1),Ke.forEach(t),we=o(e),q=n(e,"P",{"data-svelte-h":!0}),c(q)!=="svelte-1stwohn"&&(q.innerHTML=Ue),Me=o(e),O=n(e,"P",{"data-svelte-h":!0}),c(O)!=="svelte-mqe50n"&&(O.innerHTML=De),Ce=o(e),B=n(e,"PRE",{class:!0});var Xe=u(B);xe=r(Xe,!1),Xe.forEach(t),this.h()},h(){F.a=null,d(w,"class","language-ps1"),X.a=null,d(C,"class","language-zsh"),ee.a=null,d(H,"class","language-bash"),le.a=null,d(y,"class","language-bash"),oe.a=null,d(g,"class","language-cpp"),ue.a=null,d(R,"class","language-cmake"),me.a=null,d(I,"class","language-bash"),he.a=null,d(A,"class","language-undefined"),be.a=null,d(N,"class","language-bash"),xe.a=null,d(B,"class","language-cmake")},m(e,a){s(e,m,a),s(e,U,a),s(e,k,a),s(e,D,a),s(e,f,a),s(e,G,a),s(e,h,a),s(e,J,a),s(e,_,a),s(e,V,a),s(e,v,a),s(e,W,a),s(e,b,a),s(e,$,a),s(e,w,a),F.m(Ze,w),s(e,Q,a),s(e,M,a),s(e,K,a),s(e,C,a),X.m(et,C),s(e,Y,a),s(e,x,a),s(e,Z,a),s(e,H,a),ee.m(tt,H),s(e,te,a),s(e,T,a),s(e,ae,a),s(e,L,a),s(e,se,a),s(e,y,a),le.m(at,y),s(e,ne,a),s(e,E,a),s(e,pe,a),s(e,g,a),oe.m(st,g),s(e,ce,a),s(e,P,a),s(e,ie,a),s(e,R,a),ue.m(lt,R),s(e,re,a),s(e,j,a),s(e,de,a),s(e,I,a),me.m(nt,I),s(e,ke,a),s(e,S,a),s(e,fe,a),s(e,A,a),he.m(pt,A),s(e,_e,a),s(e,z,a),s(e,ve,a),s(e,N,a),be.m(ot,N),s(e,we,a),s(e,q,a),s(e,Me,a),s(e,O,a),s(e,Ce,a),s(e,B,a),xe.m(ct,B)},p:He,i:He,o:He,d(e){e&&(t(m),t(U),t(k),t(D),t(f),t(G),t(h),t(J),t(_),t(V),t(v),t(W),t(b),t($),t(w),t(Q),t(M),t(K),t(C),t(Y),t(x),t(Z),t(H),t(te),t(T),t(ae),t(L),t(se),t(y),t(ne),t(E),t(pe),t(g),t(ce),t(P),t(ie),t(R),t(re),t(j),t(de),t(I),t(ke),t(S),t(fe),t(A),t(_e),t(z),t(ve),t(N),t(we),t(q),t(Me),t(O),t(Ce),t(B))}}}const ft={title:"Building C/C++ projects with CMake",description:"Leverage CMake to automate the source code build process",date:"2023-09-30",image:"/images/macbook-code.jpg",categories:["CMake"],published:!0};class ht extends ut{constructor(m){super(),rt(this,m,null,dt,it,{})}}export{ht as default,ft as metadata};
