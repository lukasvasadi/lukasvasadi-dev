import{s as Ds,n as xe}from"./scheduler.ae1baad1.js";import{S as Us,i as Gs,g as n,s as p,H as i,h as l,z as c,c as o,j as u,D as r,f as e,k,a as t}from"./index.171b1fb8.js";function Vs(ws){let d,ge="Contents",ca,m,Le='<li><a href="#introduction">Introduction</a></li> <li><a href="#installation">Installation</a></li> <li><a href="#basics">Basics</a></li> <li><a href="#libraries">Libraries</a></li>',ia,f,Ee='<a id="introduction">Introduction</a>',ua,h,Te="CMake is an open-source, cross-platform automation tool for generating C/C++ Makefiles, which can then be used to build the source. It has become the <em>de facto</em> build system for the developer community as well as major companies, such as Qt and ST Microelectronics.",ra,b,He='<a id="installation">Installation</a>',ka,_,Pe="See below for platform-specific commands to install the CMake toolchain. The rest of the tutorial will use Unix-style commands, but these should be directly transferable to Windows systems. Note that each platform also requires a dedicated compiler for C/C++ applications.",da,w,Re="<strong>Windows (Chocolatey):</strong>",ma,v,fa,vs='<code class="language-ps1">choco install cmake visualstudio2022buildtools</code>',ha,C,je="<strong>macOS (Homebrew):</strong>",ba,y,_a,Cs='<code class="language-zsh">brew install cmake llvm</code>',wa,M,Ae="<strong>Linux:</strong>",va,x,Ca,ys='<code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">make</span> cmake gcc g++ gdb</code>',ya,g,Ie='<a id="basics">Basics</a>',Ma,L,Ne="CMake relies on a top-level file called <code>CMakeLists.txt</code>, which should be created in the same directory as the source. (It is good practice to separate source code and build files.) To demonstrate a CMake project, we can create a <code>HelloCMake</code> directory with a <code>build</code> subdirectory:",xa,E,ga,Ms='<code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/HelloCMake/build</code>',La,T,Se="Create a <code>~/HelloCMake/main.cpp</code> file:",Ea,H,Ta,xs=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>iostream<span class="token operator">></span></span></span>

<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hey, CMake!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ha,P,Oe="Add a <code>CMakeLists.txt</code> file (use the CMake version output from <code>cmake --version</code>):",Pa,R,Ra,gs=`<code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.27.4</span><span class="token punctuation">)</span>

<span class="token keyword">project</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> main.cpp<span class="token punctuation">)</span></code>`,ja,j,Be="To generate the Makefile, which contains the recipe to build the source, run the <code>cmake</code> command and specify the locations of the <code>src</code> and <code>build</code> directories:",Aa,A,Ia,Ls='<code class="language-bash">cmake <span class="token parameter variable">-S</span> ~/HelloCMake <span class="token parameter variable">-B</span> ~/HelloCMake/build</code>',Na,I,qe="After running that command, the project folder should appear as follows:",Sa,N,Oa,Es=`<code class="language-undefined">├── build
│   ├── CMakeCache.txt
│   ├── CMakeFiles
│   ├── Makefile
│   └── cmake_install.cmake
├── CMakeLists.txt
└── main.cpp</code>`,Ba,S,ze="Now run the <code>make</code> command inside the build folder:",qa,O,za,Ts=`<code class="language-bash"><span class="token builtin class-name">cd</span> ~/HelloCMake/build
<span class="token function">make</span></code>`,Xa,B,Xe="At this point, if the build was successful, there will be an executable called <code>hello</code>, which can be run with <code>./hello</code>.",Da,q,De="In addition to setting the CMake version requirements, project name, and source target, we can specify the project version and languages, as well as the C/C++ ISO standard. CMake also provides an install keyword to specify the executable target directory. This feature is especially helpful for Linux users who may want their program to be accessible from the command line. For example, the below CMake file will place our <code>hello</code> executable into the system <code>bin</code> folder:",Ua,z,Ga,Hs=`<code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.27.4</span><span class="token punctuation">)</span>

<span class="token keyword">project</span><span class="token punctuation">(</span>hello <span class="token property">VERSION</span> <span class="token number">1.0.0</span> LANGUAGES C CXX<span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">17</span><span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> main.cpp<span class="token punctuation">)</span>

<span class="token keyword">install</span><span class="token punctuation">(</span>TARGET hello DESTINATION bin<span class="token punctuation">)</span></code>`,Va,X,Ue="With this configuration, we can run the <code>make install</code> command with root privileges to install the executable into <code>/usr/local/bin</code>:",Fa,D,Ja,Ps='<code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code>',Wa,U,Ge="Now we can run the application from anywhere in the file system:",$a,G,Ka,Rs='<code class="language-bash">hello</code>',Qa,V,Ve='<a id="libraries">Libraries</a>',Ya,F,Fe="Most projects use libraries for reusable source code. Often, these libraries should be placed in a dedicated subdirectory, such as is shown below with the library named <code>basicmath</code>:",Za,J,ae,js=`<code class="language-undefined">├── build
│   ├── CMakeCache.txt
│   ├── CMakeFiles
│   ├── Makefile
│   └── cmake_install.cmake
├── lib
│   ├── basicmath
│   │   ├── include
│   │   │   └── basicmath.h
│   │   ├── src
│   │   │   ├── basicmath.cpp
│   │   │   └── CMakeLists.txt
│   │   └── CMakeLists.txt
│   └── CMakeLists.txt
├── CMakeLists.txt
└── main.cpp</code>`,ee,W,Je="Notice how each subdirectory of the library contains a <code>CMakeLists.txt</code> file. This is needed for nested source code directories, but most of these files will only contain one line to point to the next directory in the chain.",se,$,We="Below are the four <code>CMakeLists.txt</code> files listed from top to bottom in the directory nest. The high-level file contains most of the project information, including the target library details. The intermediary files contain one command to point to the relevant subdirectory, and the last contains the library definition as well as a pointer to the <code>include</code> directory will the header files.",te,K,ne,As=`<code class="language-cmake"><span class="token comment"># adder/CMakeLists.txt</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.27.4</span><span class="token punctuation">)</span>

<span class="token keyword">project</span><span class="token punctuation">(</span>adder <span class="token property">VERSION</span> <span class="token number">1.0.0</span> LANGUAGES C CXX<span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">17</span><span class="token punctuation">)</span>

<span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>lib<span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> main.cpp<span class="token punctuation">)</span>

<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>adder <span class="token namespace">PUBLIC</span> BasicMath<span class="token punctuation">)</span></code>`,le,Q,pe,Is=`<code class="language-cmake"><span class="token comment"># adder/lib/CMakeLists.txt</span>
<span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>basicmath<span class="token punctuation">)</span></code>`,oe,Y,ce,Ns=`<code class="language-cmake"><span class="token comment"># adder/lib/basicmath/CMakeLists.txt</span>
<span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span></code>`,ie,Z,ue,Ss=`<code class="language-cmake"><span class="token comment"># adder/lib/basicmath/src/CMakeLists.txt</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>BasicMath <span class="token namespace">STATIC</span> adder.cpp<span class="token punctuation">)</span>
<span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>BasicMath <span class="token namespace">PUBLIC</span> <span class="token string">"../include"</span><span class="token punctuation">)</span></code>`,re,aa,$e="Below is the source code for reference:",ke,ea,de,Os=`<code class="language-cpp"><span class="token comment">/* basicmath.h */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token keyword">namespace</span> basicmath <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,me,sa,fe,Bs=`<code class="language-cpp"><span class="token comment">/* basicmath.cpp */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"basicmath.h"</span></span>

<span class="token keyword">int</span> basicmath<span class="token double-colon punctuation">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">float</span> basicmath<span class="token double-colon punctuation">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,he,ta,be,qs=`<code class="language-cpp"><span class="token comment">/* main.cpp */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"basicmath.h"</span></span>

<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2.5 + 2.5 = "</span> <span class="token operator">&lt;&lt;</span> basicmath<span class="token double-colon punctuation">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,_e,na,Ke="To test this project configuration, execute the following commands, assuming that the build process has been completed at least once:",we,la,ve,zs=`<code class="language-bash"><span class="token builtin class-name">cd</span> build
cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span>
<span class="token function">make</span>
./adder</code>`,Ce,pa,Qe="Optionally, you can choose to only target the library during the build routine, which may help you pinpoint build errors:",ye,oa,Me,Xs='<code class="language-bash">cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--target</span> basicmath</code>';return{c(){d=n("h2"),d.textContent=ge,ca=p(),m=n("ul"),m.innerHTML=Le,ia=p(),f=n("h2"),f.innerHTML=Ee,ua=p(),h=n("p"),h.innerHTML=Te,ra=p(),b=n("h2"),b.innerHTML=He,ka=p(),_=n("p"),_.textContent=Pe,da=p(),w=n("p"),w.innerHTML=Re,ma=p(),v=n("pre"),fa=new i(!1),ha=p(),C=n("p"),C.innerHTML=je,ba=p(),y=n("pre"),_a=new i(!1),wa=p(),M=n("p"),M.innerHTML=Ae,va=p(),x=n("pre"),Ca=new i(!1),ya=p(),g=n("h2"),g.innerHTML=Ie,Ma=p(),L=n("p"),L.innerHTML=Ne,xa=p(),E=n("pre"),ga=new i(!1),La=p(),T=n("p"),T.innerHTML=Se,Ea=p(),H=n("pre"),Ta=new i(!1),Ha=p(),P=n("p"),P.innerHTML=Oe,Pa=p(),R=n("pre"),Ra=new i(!1),ja=p(),j=n("p"),j.innerHTML=Be,Aa=p(),A=n("pre"),Ia=new i(!1),Na=p(),I=n("p"),I.textContent=qe,Sa=p(),N=n("pre"),Oa=new i(!1),Ba=p(),S=n("p"),S.innerHTML=ze,qa=p(),O=n("pre"),za=new i(!1),Xa=p(),B=n("p"),B.innerHTML=Xe,Da=p(),q=n("p"),q.innerHTML=De,Ua=p(),z=n("pre"),Ga=new i(!1),Va=p(),X=n("p"),X.innerHTML=Ue,Fa=p(),D=n("pre"),Ja=new i(!1),Wa=p(),U=n("p"),U.textContent=Ge,$a=p(),G=n("pre"),Ka=new i(!1),Qa=p(),V=n("h2"),V.innerHTML=Ve,Ya=p(),F=n("p"),F.innerHTML=Fe,Za=p(),J=n("pre"),ae=new i(!1),ee=p(),W=n("p"),W.innerHTML=Je,se=p(),$=n("p"),$.innerHTML=We,te=p(),K=n("pre"),ne=new i(!1),le=p(),Q=n("pre"),pe=new i(!1),oe=p(),Y=n("pre"),ce=new i(!1),ie=p(),Z=n("pre"),ue=new i(!1),re=p(),aa=n("p"),aa.textContent=$e,ke=p(),ea=n("pre"),de=new i(!1),me=p(),sa=n("pre"),fe=new i(!1),he=p(),ta=n("pre"),be=new i(!1),_e=p(),na=n("p"),na.textContent=Ke,we=p(),la=n("pre"),ve=new i(!1),Ce=p(),pa=n("p"),pa.textContent=Qe,ye=p(),oa=n("pre"),Me=new i(!1),this.h()},l(a){d=l(a,"H2",{"data-svelte-h":!0}),c(d)!=="svelte-jpxk5s"&&(d.textContent=ge),ca=o(a),m=l(a,"UL",{"data-svelte-h":!0}),c(m)!=="svelte-hwfpbi"&&(m.innerHTML=Le),ia=o(a),f=l(a,"H2",{"data-svelte-h":!0}),c(f)!=="svelte-117zo8l"&&(f.innerHTML=Ee),ua=o(a),h=l(a,"P",{"data-svelte-h":!0}),c(h)!=="svelte-1pr33fw"&&(h.innerHTML=Te),ra=o(a),b=l(a,"H2",{"data-svelte-h":!0}),c(b)!=="svelte-1dz9mr"&&(b.innerHTML=He),ka=o(a),_=l(a,"P",{"data-svelte-h":!0}),c(_)!=="svelte-1r00eh7"&&(_.textContent=Pe),da=o(a),w=l(a,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1nermpu"&&(w.innerHTML=Re),ma=o(a),v=l(a,"PRE",{class:!0});var s=u(v);fa=r(s,!1),s.forEach(e),ha=o(a),C=l(a,"P",{"data-svelte-h":!0}),c(C)!=="svelte-1m1hzlg"&&(C.innerHTML=je),ba=o(a),y=l(a,"PRE",{class:!0});var Ye=u(y);_a=r(Ye,!1),Ye.forEach(e),wa=o(a),M=l(a,"P",{"data-svelte-h":!0}),c(M)!=="svelte-rurumh"&&(M.innerHTML=Ae),va=o(a),x=l(a,"PRE",{class:!0});var Ze=u(x);Ca=r(Ze,!1),Ze.forEach(e),ya=o(a),g=l(a,"H2",{"data-svelte-h":!0}),c(g)!=="svelte-rxkq8j"&&(g.innerHTML=Ie),Ma=o(a),L=l(a,"P",{"data-svelte-h":!0}),c(L)!=="svelte-1r498ka"&&(L.innerHTML=Ne),xa=o(a),E=l(a,"PRE",{class:!0});var as=u(E);ga=r(as,!1),as.forEach(e),La=o(a),T=l(a,"P",{"data-svelte-h":!0}),c(T)!=="svelte-16rjz4n"&&(T.innerHTML=Se),Ea=o(a),H=l(a,"PRE",{class:!0});var es=u(H);Ta=r(es,!1),es.forEach(e),Ha=o(a),P=l(a,"P",{"data-svelte-h":!0}),c(P)!=="svelte-bess08"&&(P.innerHTML=Oe),Pa=o(a),R=l(a,"PRE",{class:!0});var ss=u(R);Ra=r(ss,!1),ss.forEach(e),ja=o(a),j=l(a,"P",{"data-svelte-h":!0}),c(j)!=="svelte-1ianm7x"&&(j.innerHTML=Be),Aa=o(a),A=l(a,"PRE",{class:!0});var ts=u(A);Ia=r(ts,!1),ts.forEach(e),Na=o(a),I=l(a,"P",{"data-svelte-h":!0}),c(I)!=="svelte-ss2ft7"&&(I.textContent=qe),Sa=o(a),N=l(a,"PRE",{class:!0});var ns=u(N);Oa=r(ns,!1),ns.forEach(e),Ba=o(a),S=l(a,"P",{"data-svelte-h":!0}),c(S)!=="svelte-gzlsh7"&&(S.innerHTML=ze),qa=o(a),O=l(a,"PRE",{class:!0});var ls=u(O);za=r(ls,!1),ls.forEach(e),Xa=o(a),B=l(a,"P",{"data-svelte-h":!0}),c(B)!=="svelte-1stwohn"&&(B.innerHTML=Xe),Da=o(a),q=l(a,"P",{"data-svelte-h":!0}),c(q)!=="svelte-obf359"&&(q.innerHTML=De),Ua=o(a),z=l(a,"PRE",{class:!0});var ps=u(z);Ga=r(ps,!1),ps.forEach(e),Va=o(a),X=l(a,"P",{"data-svelte-h":!0}),c(X)!=="svelte-3ujk"&&(X.innerHTML=Ue),Fa=o(a),D=l(a,"PRE",{class:!0});var os=u(D);Ja=r(os,!1),os.forEach(e),Wa=o(a),U=l(a,"P",{"data-svelte-h":!0}),c(U)!=="svelte-h63w2k"&&(U.textContent=Ge),$a=o(a),G=l(a,"PRE",{class:!0});var cs=u(G);Ka=r(cs,!1),cs.forEach(e),Qa=o(a),V=l(a,"H2",{"data-svelte-h":!0}),c(V)!=="svelte-153n8al"&&(V.innerHTML=Ve),Ya=o(a),F=l(a,"P",{"data-svelte-h":!0}),c(F)!=="svelte-13q6h5h"&&(F.innerHTML=Fe),Za=o(a),J=l(a,"PRE",{class:!0});var is=u(J);ae=r(is,!1),is.forEach(e),ee=o(a),W=l(a,"P",{"data-svelte-h":!0}),c(W)!=="svelte-383yfb"&&(W.innerHTML=Je),se=o(a),$=l(a,"P",{"data-svelte-h":!0}),c($)!=="svelte-nso5p0"&&($.innerHTML=We),te=o(a),K=l(a,"PRE",{class:!0});var us=u(K);ne=r(us,!1),us.forEach(e),le=o(a),Q=l(a,"PRE",{class:!0});var rs=u(Q);pe=r(rs,!1),rs.forEach(e),oe=o(a),Y=l(a,"PRE",{class:!0});var ks=u(Y);ce=r(ks,!1),ks.forEach(e),ie=o(a),Z=l(a,"PRE",{class:!0});var ds=u(Z);ue=r(ds,!1),ds.forEach(e),re=o(a),aa=l(a,"P",{"data-svelte-h":!0}),c(aa)!=="svelte-13nuwsm"&&(aa.textContent=$e),ke=o(a),ea=l(a,"PRE",{class:!0});var ms=u(ea);de=r(ms,!1),ms.forEach(e),me=o(a),sa=l(a,"PRE",{class:!0});var fs=u(sa);fe=r(fs,!1),fs.forEach(e),he=o(a),ta=l(a,"PRE",{class:!0});var hs=u(ta);be=r(hs,!1),hs.forEach(e),_e=o(a),na=l(a,"P",{"data-svelte-h":!0}),c(na)!=="svelte-1u06f0n"&&(na.textContent=Ke),we=o(a),la=l(a,"PRE",{class:!0});var bs=u(la);ve=r(bs,!1),bs.forEach(e),Ce=o(a),pa=l(a,"P",{"data-svelte-h":!0}),c(pa)!=="svelte-1v8gj8f"&&(pa.textContent=Qe),ye=o(a),oa=l(a,"PRE",{class:!0});var _s=u(oa);Me=r(_s,!1),_s.forEach(e),this.h()},h(){fa.a=null,k(v,"class","language-ps1"),_a.a=null,k(y,"class","language-zsh"),Ca.a=null,k(x,"class","language-bash"),ga.a=null,k(E,"class","language-bash"),Ta.a=null,k(H,"class","language-cpp"),Ra.a=null,k(R,"class","language-cmake"),Ia.a=null,k(A,"class","language-bash"),Oa.a=null,k(N,"class","language-undefined"),za.a=null,k(O,"class","language-bash"),Ga.a=null,k(z,"class","language-cmake"),Ja.a=null,k(D,"class","language-bash"),Ka.a=null,k(G,"class","language-bash"),ae.a=null,k(J,"class","language-undefined"),ne.a=null,k(K,"class","language-cmake"),pe.a=null,k(Q,"class","language-cmake"),ce.a=null,k(Y,"class","language-cmake"),ue.a=null,k(Z,"class","language-cmake"),de.a=null,k(ea,"class","language-cpp"),fe.a=null,k(sa,"class","language-cpp"),be.a=null,k(ta,"class","language-cpp"),ve.a=null,k(la,"class","language-bash"),Me.a=null,k(oa,"class","language-bash")},m(a,s){t(a,d,s),t(a,ca,s),t(a,m,s),t(a,ia,s),t(a,f,s),t(a,ua,s),t(a,h,s),t(a,ra,s),t(a,b,s),t(a,ka,s),t(a,_,s),t(a,da,s),t(a,w,s),t(a,ma,s),t(a,v,s),fa.m(vs,v),t(a,ha,s),t(a,C,s),t(a,ba,s),t(a,y,s),_a.m(Cs,y),t(a,wa,s),t(a,M,s),t(a,va,s),t(a,x,s),Ca.m(ys,x),t(a,ya,s),t(a,g,s),t(a,Ma,s),t(a,L,s),t(a,xa,s),t(a,E,s),ga.m(Ms,E),t(a,La,s),t(a,T,s),t(a,Ea,s),t(a,H,s),Ta.m(xs,H),t(a,Ha,s),t(a,P,s),t(a,Pa,s),t(a,R,s),Ra.m(gs,R),t(a,ja,s),t(a,j,s),t(a,Aa,s),t(a,A,s),Ia.m(Ls,A),t(a,Na,s),t(a,I,s),t(a,Sa,s),t(a,N,s),Oa.m(Es,N),t(a,Ba,s),t(a,S,s),t(a,qa,s),t(a,O,s),za.m(Ts,O),t(a,Xa,s),t(a,B,s),t(a,Da,s),t(a,q,s),t(a,Ua,s),t(a,z,s),Ga.m(Hs,z),t(a,Va,s),t(a,X,s),t(a,Fa,s),t(a,D,s),Ja.m(Ps,D),t(a,Wa,s),t(a,U,s),t(a,$a,s),t(a,G,s),Ka.m(Rs,G),t(a,Qa,s),t(a,V,s),t(a,Ya,s),t(a,F,s),t(a,Za,s),t(a,J,s),ae.m(js,J),t(a,ee,s),t(a,W,s),t(a,se,s),t(a,$,s),t(a,te,s),t(a,K,s),ne.m(As,K),t(a,le,s),t(a,Q,s),pe.m(Is,Q),t(a,oe,s),t(a,Y,s),ce.m(Ns,Y),t(a,ie,s),t(a,Z,s),ue.m(Ss,Z),t(a,re,s),t(a,aa,s),t(a,ke,s),t(a,ea,s),de.m(Os,ea),t(a,me,s),t(a,sa,s),fe.m(Bs,sa),t(a,he,s),t(a,ta,s),be.m(qs,ta),t(a,_e,s),t(a,na,s),t(a,we,s),t(a,la,s),ve.m(zs,la),t(a,Ce,s),t(a,pa,s),t(a,ye,s),t(a,oa,s),Me.m(Xs,oa)},p:xe,i:xe,o:xe,d(a){a&&(e(d),e(ca),e(m),e(ia),e(f),e(ua),e(h),e(ra),e(b),e(ka),e(_),e(da),e(w),e(ma),e(v),e(ha),e(C),e(ba),e(y),e(wa),e(M),e(va),e(x),e(ya),e(g),e(Ma),e(L),e(xa),e(E),e(La),e(T),e(Ea),e(H),e(Ha),e(P),e(Pa),e(R),e(ja),e(j),e(Aa),e(A),e(Na),e(I),e(Sa),e(N),e(Ba),e(S),e(qa),e(O),e(Xa),e(B),e(Da),e(q),e(Ua),e(z),e(Va),e(X),e(Fa),e(D),e(Wa),e(U),e($a),e(G),e(Qa),e(V),e(Ya),e(F),e(Za),e(J),e(ee),e(W),e(se),e($),e(te),e(K),e(le),e(Q),e(oe),e(Y),e(ie),e(Z),e(re),e(aa),e(ke),e(ea),e(me),e(sa),e(he),e(ta),e(_e),e(na),e(we),e(la),e(Ce),e(pa),e(ye),e(oa))}}}const Ws={title:"Building C/C++ projects with CMake",description:"Leverage CMake to automate the source code build process",date:"2023-09-30",image:"/images/macbook-code.jpg",categories:["CMake"],published:!0};class $s extends Us{constructor(d){super(),Gs(this,d,null,Vs,Ds,{})}}export{$s as default,Ws as metadata};
