import{s as Ne,n as Qe}from"./scheduler.ae1baad1.js";import{S as Ve,i as Xe,g as p,s as a,r as de,H as c,e as De,h as o,z as i,c as n,u as fe,D as r,a as s,v as Be,d as Ce,t as xe,f as l,w as ve}from"./index.0e1198e2.js";import{H as _e}from"./heading.44adad14.js";function Ye(Te){let u,he='<img src="https://upload.wikimedia.org/wikipedia/commons/d/db/Julia1.1.1.jpg" alt="Julia REPL"/>',V,y,ke="Contents",X,m,we='<li><a href="#introduction">Introduction</a></li>',Y,d,Z,f,Fe="Julia is a modern programming language released in 2011. It has been developed and maintained by researchers at MIT. Being a modern language, Julia has learned from its predecessors and combines some of the best features of low-level languages (performance) and high-level languages (elegance, simple syntax). Specifically, Julia was designed to address the common “two language” problem, where software is typically prototyped in a high-level language, such as Python, for fast development and then later translated to a low-level language, such as C++, for performance.",ee,B,Ae="To install Julia on the local machine:",te,C,be="Windows",se,$,je='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">choco install julia</span></span></code></pre>',E,x,ge="macOS",le,H,Me='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">brew</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">julia</span></span></code></pre>',q,v,$e="Linux (Debian derivatives)",ae,J,Se='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">apt</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">julia</span></span></code></pre>',P,_,ne,h,Ee="Julia provides a read-event-print loop (REPL) as an interactive shell to test simple expressions, run scripts, and manage packages. After downloading Julia, you can start the REPL with the <code>julia</code> command in the terminal. Inside this new prompt, you can either evaluate expressions or access the package manager with <code>]</code>. To exit the package manager, press backspace or CTRL+C; to exit the REPL environment, execute the <code>exit()</code> command.",pe,k,He="Package management",oe,w,qe="Similar to Python, Julia provides virtual environments to sandbox packages for a specific project.",ie,F,ce,L,Ie='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">?println</span></span></code></pre>',D,T,Re=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># Single line comment</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">#=</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    Multi-line</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    comment!</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">=#</span></span></code></pre>`,j,M,ze='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">∇ = </span><span style="color: #98C379">&quot;Unicode variables!&quot;</span></span></code></pre>',S,I,We=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Hello!&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #56B6C2">typeof</span><span style="color: #ABB2BF">(Int64)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># string interpolation</span></span>
<span class="line"><span style="color: #ABB2BF">name = </span><span style="color: #98C379">&quot;Julia&quot;</span></span>
<span class="line"><span style="color: #56B6C2">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Hello, </span><span style="color: #E06C75">$name</span><span style="color: #98C379">&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">x = </span><span style="color: #D19A66">3</span></span>
<span class="line"><span style="color: #56B6C2">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;x + 1 = </span><span style="color: #E06C75">$(x </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #D19A66">1</span><span style="color: #E06C75">)</span><span style="color: #98C379">&quot;</span><span style="color: #ABB2BF">)</span></span></code></pre>`,R,A,Je="By default, Julia functions return the value produced on the last line of the function definition.",re,z,Ue=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">function</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">(x)</span></span>
<span class="line"><span style="color: #ABB2BF">    x</span><span style="color: #56B6C2">^</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF"> </span><span style="color: #7F848E; font-style: italic"># return x^2 is also valid declarative syntax</span></span>
<span class="line"><span style="color: #C678DD">end</span></span></code></pre>`,W,U,Oe='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">(x) = x</span><span style="color: #56B6C2">^</span><span style="color: #D19A66">2</span></span></code></pre>',O,b,Pe="Similar to Python and JavaScript, Julia supports “anonymous” (lambda) functions.",ue,G,Ge=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">(first, last) -&gt; </span><span style="color: #56B6C2">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Welcome, </span><span style="color: #E06C75">$first</span><span style="color: #98C379"> </span><span style="color: #E06C75">$last</span><span style="color: #98C379">&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">x -&gt; x</span><span style="color: #56B6C2">^</span><span style="color: #D19A66">2</span></span></code></pre>`,K,g,Le="However, unlike those other languages, Julia allows developers to bind a name to anonumous functions, so that it can be referenced later:",ye,N,Ke=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">welcome = (first, last) -&gt; </span><span style="color: #56B6C2">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Welcome, </span><span style="color: #E06C75">$first</span><span style="color: #98C379"> </span><span style="color: #E06C75">$last</span><span style="color: #98C379">&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">f = x -&gt; x</span><span style="color: #56B6C2">^</span><span style="color: #D19A66">2</span></span></code></pre>`,Q,me;return d=new _e({props:{str:"Introduction"}}),_=new _e({props:{str:"REPL and package manager"}}),F=new _e({props:{str:"Basic commands and syntax"}}),{c(){u=p("p"),u.innerHTML=he,V=a(),y=p("h2"),y.textContent=ke,X=a(),m=p("ul"),m.innerHTML=we,Y=a(),de(d.$$.fragment),Z=a(),f=p("p"),f.textContent=Fe,ee=a(),B=p("p"),B.textContent=Ae,te=a(),C=p("h4"),C.textContent=be,se=a(),$=new c(!1),E=a(),x=p("h4"),x.textContent=ge,le=a(),H=new c(!1),q=a(),v=p("h4"),v.textContent=$e,ae=a(),J=new c(!1),P=a(),de(_.$$.fragment),ne=a(),h=p("p"),h.innerHTML=Ee,pe=a(),k=p("h3"),k.textContent=He,oe=a(),w=p("p"),w.textContent=qe,ie=a(),de(F.$$.fragment),ce=a(),L=new c(!1),D=a(),T=new c(!1),j=a(),M=new c(!1),S=a(),I=new c(!1),R=a(),A=p("p"),A.textContent=Je,re=a(),z=new c(!1),W=a(),U=new c(!1),O=a(),b=p("p"),b.textContent=Pe,ue=a(),G=new c(!1),K=a(),g=p("p"),g.textContent=Le,ye=a(),N=new c(!1),Q=De(),this.h()},l(e){u=o(e,"P",{"data-svelte-h":!0}),i(u)!=="svelte-14qmd3h"&&(u.innerHTML=he),V=n(e),y=o(e,"H2",{"data-svelte-h":!0}),i(y)!=="svelte-jpxk5s"&&(y.textContent=ke),X=n(e),m=o(e,"UL",{"data-svelte-h":!0}),i(m)!=="svelte-anegq1"&&(m.innerHTML=we),Y=n(e),fe(d.$$.fragment,e),Z=n(e),f=o(e,"P",{"data-svelte-h":!0}),i(f)!=="svelte-fi71ji"&&(f.textContent=Fe),ee=n(e),B=o(e,"P",{"data-svelte-h":!0}),i(B)!=="svelte-1rfj9uv"&&(B.textContent=Ae),te=n(e),C=o(e,"H4",{"data-svelte-h":!0}),i(C)!=="svelte-a506pd"&&(C.textContent=be),se=n(e),$=r(e,!1),E=n(e),x=o(e,"H4",{"data-svelte-h":!0}),i(x)!=="svelte-1f4vatt"&&(x.textContent=ge),le=n(e),H=r(e,!1),q=n(e),v=o(e,"H4",{"data-svelte-h":!0}),i(v)!=="svelte-2zxhwq"&&(v.textContent=$e),ae=n(e),J=r(e,!1),P=n(e),fe(_.$$.fragment,e),ne=n(e),h=o(e,"P",{"data-svelte-h":!0}),i(h)!=="svelte-1m47x68"&&(h.innerHTML=Ee),pe=n(e),k=o(e,"H3",{"data-svelte-h":!0}),i(k)!=="svelte-1ggpnxn"&&(k.textContent=He),oe=n(e),w=o(e,"P",{"data-svelte-h":!0}),i(w)!=="svelte-1k6omw6"&&(w.textContent=qe),ie=n(e),fe(F.$$.fragment,e),ce=n(e),L=r(e,!1),D=n(e),T=r(e,!1),j=n(e),M=r(e,!1),S=n(e),I=r(e,!1),R=n(e),A=o(e,"P",{"data-svelte-h":!0}),i(A)!=="svelte-ii93tl"&&(A.textContent=Je),re=n(e),z=r(e,!1),W=n(e),U=r(e,!1),O=n(e),b=o(e,"P",{"data-svelte-h":!0}),i(b)!=="svelte-ztt9bk"&&(b.textContent=Pe),ue=n(e),G=r(e,!1),K=n(e),g=o(e,"P",{"data-svelte-h":!0}),i(g)!=="svelte-17kf201"&&(g.textContent=Le),ye=n(e),N=r(e,!1),Q=De(),this.h()},h(){$.a=E,H.a=q,J.a=P,L.a=D,T.a=j,M.a=S,I.a=R,z.a=W,U.a=O,G.a=K,N.a=Q},m(e,t){s(e,u,t),s(e,V,t),s(e,y,t),s(e,X,t),s(e,m,t),s(e,Y,t),Be(d,e,t),s(e,Z,t),s(e,f,t),s(e,ee,t),s(e,B,t),s(e,te,t),s(e,C,t),s(e,se,t),$.m(je,e,t),s(e,E,t),s(e,x,t),s(e,le,t),H.m(Me,e,t),s(e,q,t),s(e,v,t),s(e,ae,t),J.m(Se,e,t),s(e,P,t),Be(_,e,t),s(e,ne,t),s(e,h,t),s(e,pe,t),s(e,k,t),s(e,oe,t),s(e,w,t),s(e,ie,t),Be(F,e,t),s(e,ce,t),L.m(Ie,e,t),s(e,D,t),T.m(Re,e,t),s(e,j,t),M.m(ze,e,t),s(e,S,t),I.m(We,e,t),s(e,R,t),s(e,A,t),s(e,re,t),z.m(Ue,e,t),s(e,W,t),U.m(Oe,e,t),s(e,O,t),s(e,b,t),s(e,ue,t),G.m(Ge,e,t),s(e,K,t),s(e,g,t),s(e,ye,t),N.m(Ke,e,t),s(e,Q,t),me=!0},p:Qe,i(e){me||(Ce(d.$$.fragment,e),Ce(_.$$.fragment,e),Ce(F.$$.fragment,e),me=!0)},o(e){xe(d.$$.fragment,e),xe(_.$$.fragment,e),xe(F.$$.fragment,e),me=!1},d(e){e&&(l(u),l(V),l(y),l(X),l(m),l(Y),l(Z),l(f),l(ee),l(B),l(te),l(C),l(se),$.d(),l(E),l(x),l(le),H.d(),l(q),l(v),l(ae),J.d(),l(P),l(ne),l(h),l(pe),l(k),l(oe),l(w),l(ie),l(ce),L.d(),l(D),T.d(),l(j),M.d(),l(S),I.d(),l(R),l(A),l(re),z.d(),l(W),U.d(),l(O),l(b),l(ue),G.d(),l(K),l(g),l(ye),l(Q),N.d()),ve(d,e),ve(_,e),ve(F,e)}}}const st={title:"Computational data science with Julia",description:"Experience the zen of Python with the performance of C",date:"2023-10-10",image:"https://upload.wikimedia.org/wikipedia/commons/d/db/Julia1.1.1.jpg",categories:["JuliaLang"],published:!1};class lt extends Ve{constructor(u){super(),Xe(this,u,null,Ye,Ne,{})}}export{lt as default,st as metadata};
