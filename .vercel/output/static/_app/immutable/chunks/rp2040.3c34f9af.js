import{s as dt,n as ut}from"./scheduler.ae1baad1.js";import{S as ft,i as mt,g as p,s as n,r as X,H as c,e as Xe,h as o,z as i,c as a,u as G,D as r,a as t,v as Y,d as Q,t as Z,f as l,w as ss}from"./index.0e1198e2.js";import{T as me}from"./tag.71a37a0c.js";import{H as Ge}from"./heading.44adad14.js";function Ct(Ye){let B,Ce='<img src="/images/rp2040.jpg" alt="Raspberry Pi Pico"/>',Ts,y,Fe="Contents",Hs,d,Ae='<li><a href="#introduction">Introduction</a></li> <li><a href="#setup">Setup</a></li>',Ls,u,Ms,f,_e="The RP2040 is the first microcontroller, or microcontroller unit (MCU), from the Raspberry Pi Foundation. As the RP2040 is not a microprocessor, it differs from the Raspberry Pi in that it cannot run a full operating system; rather, developers program the chip using compiled C/C++ or MicroPython code, similar to the Arduino development platform.",gs,m,Ss,C,he="Resources",Rs,F,be="The following web resources contain detailed information on the RP2040 and its C/C++ software development kit (pico-sdk).",Os,A,xe='<li><a href="https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf" rel="nofollow">Pico SDK setup</a></li> <li><a href="https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-c-sdk.pdf" rel="nofollow">Pico SDK libraries and code structure</a></li>',Is,_,Ks,h,ve='This setup procedure is a consolidated version of the instructions from the <a href="https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf" rel="nofollow">C/C++ SDK setup documentation</a>. These instructions are the same for macOS and Linux, with the exception of the build toolchain installation.',Ns,b,ke="Clone the RP2040 C/C++ SDK",qs,x,we="Clone the pico-sdk GitHub repository and update its submodules:",Us,es,Qe=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">mkdir</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/Code/pico</span></span>
<span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/Code/pico</span></span>
<span class="line"><span style="color: #61AFEF">git</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">clone</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-b</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">master</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">https://github.com/raspberrypi/pico-sdk.git</span></span>
<span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">pico-sdk</span></span>
<span class="line"><span style="color: #61AFEF">git</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">submodule</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">update</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--init</span></span></code></pre>`,ts,v,De="At the time of writing, the <code>submodule update</code> command is needed to enable USB functionality. Failure to run this command may prevent RP2040 flashing with the UF2 bootloader!",js,k,Pe="In the future, to get the latest updates or releases for the SDK:",zs,ls,Ze=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">git</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">pull</span></span>
<span class="line"><span style="color: #61AFEF">git</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">submodule</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">update</span></span></code></pre>`,ns,w,Ee="Before moving forward, we need to create an environment variable that contains the path to the pico-sdk directory, which the build tools will reference during compilation. To find the absolute path to the SDK:",Js,as,st='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">pwd</span></span></code></pre>',ps,D,$e="Copy this path and paste it into the export command to set the <code>PICO_SDK_PATH</code> environment variable:",Vs,os,et=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># replace the path with the output from pwd</span></span>
<span class="line"><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">PICO_SDK_PATH</span><span style="color: #56B6C2">=</span><span style="color: #E06C75">$HOME</span><span style="color: #98C379">/Code/pico/pico-sdk</span></span></code></pre>`,is,P,Ws,E,Te="To add <code>PICO_SDK_PATH</code> to the user profile:",Xs,cs,tt='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">echo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&#39;export &quot;PICO_SDK_PATH=$HOME/Code/pico/pico-sdk&quot;&#39;</span><span style="color: #ABB2BF"> &gt;&gt; </span><span style="color: #98C379">~/.zshrc</span></span></code></pre>',rs,$,He="To confirm environment variable preservation:",Gs,Bs,lt=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">source</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/.zshrc</span></span>
<span class="line"><span style="color: #56B6C2">echo</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">$PICO_SDK_PATH</span></span></code></pre>`,ys,T,Le="Build toolchain",Ys,H,Qs,L,Me="Linux",Zs,M,ge="To build source files, install the necessary toolchain packages:",se,ds,nt='<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">apt</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">gcc-arm-none-eabi</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">libnewlib-arm-none-eabi</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">build-essential</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">libstdc++-arm-none-eabi-newlib</span></span></code></pre>',us,g,Se="macOS",ee,fs,at=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">brew</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cmake</span></span>
<span class="line"><span style="color: #61AFEF">brew</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">tap</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">ArmMbed/homebrew-formulae</span></span>
<span class="line"><span style="color: #61AFEF">brew</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">arm-none-eabi-gcc</span></span></code></pre>`,ms,S,Re="Configuring VS Code",te,R,Oe="VS Code is the recommended text editor for writing source code for the RP2040.",le,O,Ie="Install the extensions needed for debugging the RP2040:",ne,Cs,pt=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">code</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--install-extension</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">maus25.cortex-debug</span></span>
<span class="line"><span style="color: #61AFEF">code</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--install-extension</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">ms-vscode.cmake-tools</span></span>
<span class="line"><span style="color: #61AFEF">code</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--install-extension</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">ms-vscode.cpptools</span></span></code></pre>`,Fs,I,Ke="When first opening a project directory in VS Code, a popup will prompt user configuration. After selecting “Yes,” a dropdown menu will present a list of configuration options. Click on the option “GCC arm-non-eabi.”",ae,K,Ne="Blinking an LED",pe,N,qe="Blinking an LED is the classic “Hello World” demo in the hardware space. To program the onboard LED to blink repeatedly, first create a dedicated source code directory:",oe,As,ot=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">mkdir</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/Code/pico/blink</span></span>
<span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/Code/pico/blink</span></span></code></pre>`,_s,q,Ue="Create a file called <code>blink.c</code> and paste the following source code:",ie,hs,it=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    Blink</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    Switches LED on for one second, then off for one second, repeatedly</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;pico/stdlib.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">// set led pin</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">uint</span><span style="color: #ABB2BF"> LED_PIN </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> PICO_DEFAULT_LED_PIN;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">gpio_init</span><span style="color: #ABB2BF">(LED_PIN);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">gpio_set_dir</span><span style="color: #ABB2BF">(LED_PIN, GPIO_OUT);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #7F848E; font-style: italic">// toggle led on and off</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">gpio_put</span><span style="color: #ABB2BF">(LED_PIN, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">sleep_ms</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1000</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">gpio_put</span><span style="color: #ABB2BF">(LED_PIN, </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">sleep_ms</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1000</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    &#125;</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre>`,bs,U,je="Add another file named <code>CMakeLists.txt</code> and paste the following code:",ce,xs,ct=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># set minimum required version of CMake</span></span>
<span class="line"><span style="color: #C678DD">cmake_minimum_required</span><span style="color: #ABB2BF">(VERSION 3.13)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># include build functions from Pico SDK</span></span>
<span class="line"><span style="color: #C678DD">include</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$ENV&#123;PICO_SDK_PATH&#125;</span><span style="color: #ABB2BF">/external/pico_sdk_import.cmake)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># set project name and C/C++ standards</span></span>
<span class="line"><span style="color: #C678DD">project</span><span style="color: #ABB2BF">(blink C CXX ASM)</span></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_C_STANDARD 11)</span></span>
<span class="line"><span style="color: #C678DD">set</span><span style="color: #ABB2BF">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># create a pico-sdk subdirectory in project for libraries</span></span>
<span class="line"><span style="color: #ABB2BF">pico_sdk_init()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># direct CMake to executable source file</span></span>
<span class="line"><span style="color: #C678DD">add_executable</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span></span>
<span class="line"><span style="color: #ABB2BF">    main.c</span></span>
<span class="line"><span style="color: #ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># create map/bin/hex/uf2 outputs</span></span>
<span class="line"><span style="color: #ABB2BF">pico_add_extra_outputs(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># link libraries</span></span>
<span class="line"><span style="color: #C678DD">target_link_libraries</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span></span>
<span class="line"><span style="color: #ABB2BF">    pico_stdlib</span></span>
<span class="line"><span style="color: #ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># enable usb output, disable uart output</span></span>
<span class="line"><span style="color: #ABB2BF">pico_enable_stdio_usb(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span><span style="color: #ABB2BF"> 1)</span></span>
<span class="line"><span style="color: #ABB2BF">pico_enable_stdio_uart(</span><span style="color: #C678DD">$&#123;PROJECT_NAME&#125;</span><span style="color: #ABB2BF"> 0)</span></span></code></pre>`,vs,j,ze="Create a build directory to store the binaries:",re,ks,rt=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">mkdir</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/Code/pico/blink/build</span></span>
<span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">~/Code/pico/blink/build</span></span></code></pre>`,ws,z,Je="Run the build process:",Be,Ds,Bt=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">cmake ..</span></span>
<span class="line"><span style="color: #ABB2BF">make</span></span></code></pre>`,Ps,J,Ve="When the build process completes, there should be a selection of new files added to the project directory. The file with extension <code>.uf2</code> contains the program code and data in UF2 form—a file format created by Microsoft—that can be dragged onto the RP2040 board when mounted as a USB device.",ye,V,de,W,We="To complete the flashing process, either drag and drop the <code>.uf2</code> file onto the device or copy manually:",ue,Es,yt=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic"># confirm device mounting (replace user with home directory name)</span></span>
<span class="line"><span style="color: #61AFEF">ls</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">/media/user</span><span style="color: #ABB2BF"> </span><span style="color: #7F848E; font-style: italic"># should return &quot;RPI-RP2&quot;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"># copy compiled source code</span></span>
<span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cp</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">blink.uf2</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">/media/user/RPI-RP2</span></span>
<span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">sync</span></span>
<span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">unmount</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">/media/user/RPI-RP2</span></span></code></pre>`,$s,fe;return u=new Ge({props:{str:"Introduction"}}),m=new me({props:{msg:'This tutorial assumes that the RP2040 development environment is being built on either macOS or a Debian-based Linux distribution, such as Ubuntu or Pop!_OS. Instructions for Windows can be found in the <a href="https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf">C/C++ SDK setup documentation</a>.'}}),_=new Ge({props:{str:"Setup"}}),P=new me({props:{tagtype:"info",msg:"Note that this command will have to be executed each time a new terminal window is opened, or the environment reloaded. To avoid this hassle, follow the instructions below to autogenerate the environment variable."}}),H=new me({props:{tagtype:"warning",msg:"Pay attention to the below instructions, which differ for macOS and Linux! "}}),V=new me({props:{tagtype:"info",msg:"To mount the RP2040 as a USB device, press and hold the <code>BOOT</code> button before connecting the board to the PC via USB. Depending on the board, this button may have a variation of its name. "}}),{c(){B=p("p"),B.innerHTML=Ce,Ts=n(),y=p("h2"),y.textContent=Fe,Hs=n(),d=p("ul"),d.innerHTML=Ae,Ls=n(),X(u.$$.fragment),Ms=n(),f=p("p"),f.textContent=_e,gs=n(),X(m.$$.fragment),Ss=n(),C=p("h3"),C.textContent=he,Rs=n(),F=p("p"),F.textContent=be,Os=n(),A=p("ul"),A.innerHTML=xe,Is=n(),X(_.$$.fragment),Ks=n(),h=p("p"),h.innerHTML=ve,Ns=n(),b=p("h3"),b.textContent=ke,qs=n(),x=p("p"),x.textContent=we,Us=n(),es=new c(!1),ts=n(),v=p("p"),v.innerHTML=De,js=n(),k=p("p"),k.textContent=Pe,zs=n(),ls=new c(!1),ns=n(),w=p("p"),w.textContent=Ee,Js=n(),as=new c(!1),ps=n(),D=p("p"),D.innerHTML=$e,Vs=n(),os=new c(!1),is=n(),X(P.$$.fragment),Ws=n(),E=p("p"),E.innerHTML=Te,Xs=n(),cs=new c(!1),rs=n(),$=p("p"),$.textContent=He,Gs=n(),Bs=new c(!1),ys=n(),T=p("h3"),T.textContent=Le,Ys=n(),X(H.$$.fragment),Qs=n(),L=p("h4"),L.textContent=Me,Zs=n(),M=p("p"),M.textContent=ge,se=n(),ds=new c(!1),us=n(),g=p("h4"),g.textContent=Se,ee=n(),fs=new c(!1),ms=n(),S=p("h3"),S.textContent=Re,te=n(),R=p("p"),R.textContent=Oe,le=n(),O=p("p"),O.textContent=Ie,ne=n(),Cs=new c(!1),Fs=n(),I=p("p"),I.textContent=Ke,ae=n(),K=p("h3"),K.textContent=Ne,pe=n(),N=p("p"),N.textContent=qe,oe=n(),As=new c(!1),_s=n(),q=p("p"),q.innerHTML=Ue,ie=n(),hs=new c(!1),bs=n(),U=p("p"),U.innerHTML=je,ce=n(),xs=new c(!1),vs=n(),j=p("p"),j.textContent=ze,re=n(),ks=new c(!1),ws=n(),z=p("p"),z.textContent=Je,Be=n(),Ds=new c(!1),Ps=n(),J=p("p"),J.innerHTML=Ve,ye=n(),X(V.$$.fragment),de=n(),W=p("p"),W.innerHTML=We,ue=n(),Es=new c(!1),$s=Xe(),this.h()},l(s){B=o(s,"P",{"data-svelte-h":!0}),i(B)!=="svelte-12l4kh1"&&(B.innerHTML=Ce),Ts=a(s),y=o(s,"H2",{"data-svelte-h":!0}),i(y)!=="svelte-jpxk5s"&&(y.textContent=Fe),Hs=a(s),d=o(s,"UL",{"data-svelte-h":!0}),i(d)!=="svelte-74ryhq"&&(d.innerHTML=Ae),Ls=a(s),G(u.$$.fragment,s),Ms=a(s),f=o(s,"P",{"data-svelte-h":!0}),i(f)!=="svelte-15rg4c2"&&(f.textContent=_e),gs=a(s),G(m.$$.fragment,s),Ss=a(s),C=o(s,"H3",{"data-svelte-h":!0}),i(C)!=="svelte-f1mqfx"&&(C.textContent=he),Rs=a(s),F=o(s,"P",{"data-svelte-h":!0}),i(F)!=="svelte-1ky8hz2"&&(F.textContent=be),Os=a(s),A=o(s,"UL",{"data-svelte-h":!0}),i(A)!=="svelte-1jk24sh"&&(A.innerHTML=xe),Is=a(s),G(_.$$.fragment,s),Ks=a(s),h=o(s,"P",{"data-svelte-h":!0}),i(h)!=="svelte-khwazh"&&(h.innerHTML=ve),Ns=a(s),b=o(s,"H3",{"data-svelte-h":!0}),i(b)!=="svelte-prbp63"&&(b.textContent=ke),qs=a(s),x=o(s,"P",{"data-svelte-h":!0}),i(x)!=="svelte-d2qp92"&&(x.textContent=we),Us=a(s),es=r(s,!1),ts=a(s),v=o(s,"P",{"data-svelte-h":!0}),i(v)!=="svelte-1mc4dwk"&&(v.innerHTML=De),js=a(s),k=o(s,"P",{"data-svelte-h":!0}),i(k)!=="svelte-1vusgh3"&&(k.textContent=Pe),zs=a(s),ls=r(s,!1),ns=a(s),w=o(s,"P",{"data-svelte-h":!0}),i(w)!=="svelte-797jb9"&&(w.textContent=Ee),Js=a(s),as=r(s,!1),ps=a(s),D=o(s,"P",{"data-svelte-h":!0}),i(D)!=="svelte-1tg05uf"&&(D.innerHTML=$e),Vs=a(s),os=r(s,!1),is=a(s),G(P.$$.fragment,s),Ws=a(s),E=o(s,"P",{"data-svelte-h":!0}),i(E)!=="svelte-6aqvnn"&&(E.innerHTML=Te),Xs=a(s),cs=r(s,!1),rs=a(s),$=o(s,"P",{"data-svelte-h":!0}),i($)!=="svelte-13kimoc"&&($.textContent=He),Gs=a(s),Bs=r(s,!1),ys=a(s),T=o(s,"H3",{"data-svelte-h":!0}),i(T)!=="svelte-1pws4k3"&&(T.textContent=Le),Ys=a(s),G(H.$$.fragment,s),Qs=a(s),L=o(s,"H4",{"data-svelte-h":!0}),i(L)!=="svelte-dikflg"&&(L.textContent=Me),Zs=a(s),M=o(s,"P",{"data-svelte-h":!0}),i(M)!=="svelte-6h196m"&&(M.textContent=ge),se=a(s),ds=r(s,!1),us=a(s),g=o(s,"H4",{"data-svelte-h":!0}),i(g)!=="svelte-1f4vatt"&&(g.textContent=Se),ee=a(s),fs=r(s,!1),ms=a(s),S=o(s,"H3",{"data-svelte-h":!0}),i(S)!=="svelte-x77d5n"&&(S.textContent=Re),te=a(s),R=o(s,"P",{"data-svelte-h":!0}),i(R)!=="svelte-1tezb5d"&&(R.textContent=Oe),le=a(s),O=o(s,"P",{"data-svelte-h":!0}),i(O)!=="svelte-1wc7x5p"&&(O.textContent=Ie),ne=a(s),Cs=r(s,!1),Fs=a(s),I=o(s,"P",{"data-svelte-h":!0}),i(I)!=="svelte-o9927v"&&(I.textContent=Ke),ae=a(s),K=o(s,"H3",{"data-svelte-h":!0}),i(K)!=="svelte-1v332ae"&&(K.textContent=Ne),pe=a(s),N=o(s,"P",{"data-svelte-h":!0}),i(N)!=="svelte-3fc8x8"&&(N.textContent=qe),oe=a(s),As=r(s,!1),_s=a(s),q=o(s,"P",{"data-svelte-h":!0}),i(q)!=="svelte-gb7tle"&&(q.innerHTML=Ue),ie=a(s),hs=r(s,!1),bs=a(s),U=o(s,"P",{"data-svelte-h":!0}),i(U)!=="svelte-1xy6th5"&&(U.innerHTML=je),ce=a(s),xs=r(s,!1),vs=a(s),j=o(s,"P",{"data-svelte-h":!0}),i(j)!=="svelte-ppg1fa"&&(j.textContent=ze),re=a(s),ks=r(s,!1),ws=a(s),z=o(s,"P",{"data-svelte-h":!0}),i(z)!=="svelte-1y4b5i9"&&(z.textContent=Je),Be=a(s),Ds=r(s,!1),Ps=a(s),J=o(s,"P",{"data-svelte-h":!0}),i(J)!=="svelte-i5sjl8"&&(J.innerHTML=Ve),ye=a(s),G(V.$$.fragment,s),de=a(s),W=o(s,"P",{"data-svelte-h":!0}),i(W)!=="svelte-5zuync"&&(W.innerHTML=We),ue=a(s),Es=r(s,!1),$s=Xe(),this.h()},h(){es.a=ts,ls.a=ns,as.a=ps,os.a=is,cs.a=rs,Bs.a=ys,ds.a=us,fs.a=ms,Cs.a=Fs,As.a=_s,hs.a=bs,xs.a=vs,ks.a=ws,Ds.a=Ps,Es.a=$s},m(s,e){t(s,B,e),t(s,Ts,e),t(s,y,e),t(s,Hs,e),t(s,d,e),t(s,Ls,e),Y(u,s,e),t(s,Ms,e),t(s,f,e),t(s,gs,e),Y(m,s,e),t(s,Ss,e),t(s,C,e),t(s,Rs,e),t(s,F,e),t(s,Os,e),t(s,A,e),t(s,Is,e),Y(_,s,e),t(s,Ks,e),t(s,h,e),t(s,Ns,e),t(s,b,e),t(s,qs,e),t(s,x,e),t(s,Us,e),es.m(Qe,s,e),t(s,ts,e),t(s,v,e),t(s,js,e),t(s,k,e),t(s,zs,e),ls.m(Ze,s,e),t(s,ns,e),t(s,w,e),t(s,Js,e),as.m(st,s,e),t(s,ps,e),t(s,D,e),t(s,Vs,e),os.m(et,s,e),t(s,is,e),Y(P,s,e),t(s,Ws,e),t(s,E,e),t(s,Xs,e),cs.m(tt,s,e),t(s,rs,e),t(s,$,e),t(s,Gs,e),Bs.m(lt,s,e),t(s,ys,e),t(s,T,e),t(s,Ys,e),Y(H,s,e),t(s,Qs,e),t(s,L,e),t(s,Zs,e),t(s,M,e),t(s,se,e),ds.m(nt,s,e),t(s,us,e),t(s,g,e),t(s,ee,e),fs.m(at,s,e),t(s,ms,e),t(s,S,e),t(s,te,e),t(s,R,e),t(s,le,e),t(s,O,e),t(s,ne,e),Cs.m(pt,s,e),t(s,Fs,e),t(s,I,e),t(s,ae,e),t(s,K,e),t(s,pe,e),t(s,N,e),t(s,oe,e),As.m(ot,s,e),t(s,_s,e),t(s,q,e),t(s,ie,e),hs.m(it,s,e),t(s,bs,e),t(s,U,e),t(s,ce,e),xs.m(ct,s,e),t(s,vs,e),t(s,j,e),t(s,re,e),ks.m(rt,s,e),t(s,ws,e),t(s,z,e),t(s,Be,e),Ds.m(Bt,s,e),t(s,Ps,e),t(s,J,e),t(s,ye,e),Y(V,s,e),t(s,de,e),t(s,W,e),t(s,ue,e),Es.m(yt,s,e),t(s,$s,e),fe=!0},p:ut,i(s){fe||(Q(u.$$.fragment,s),Q(m.$$.fragment,s),Q(_.$$.fragment,s),Q(P.$$.fragment,s),Q(H.$$.fragment,s),Q(V.$$.fragment,s),fe=!0)},o(s){Z(u.$$.fragment,s),Z(m.$$.fragment,s),Z(_.$$.fragment,s),Z(P.$$.fragment,s),Z(H.$$.fragment,s),Z(V.$$.fragment,s),fe=!1},d(s){s&&(l(B),l(Ts),l(y),l(Hs),l(d),l(Ls),l(Ms),l(f),l(gs),l(Ss),l(C),l(Rs),l(F),l(Os),l(A),l(Is),l(Ks),l(h),l(Ns),l(b),l(qs),l(x),l(Us),es.d(),l(ts),l(v),l(js),l(k),l(zs),ls.d(),l(ns),l(w),l(Js),as.d(),l(ps),l(D),l(Vs),os.d(),l(is),l(Ws),l(E),l(Xs),cs.d(),l(rs),l($),l(Gs),Bs.d(),l(ys),l(T),l(Ys),l(Qs),l(L),l(Zs),l(M),l(se),ds.d(),l(us),l(g),l(ee),fs.d(),l(ms),l(S),l(te),l(R),l(le),l(O),l(ne),Cs.d(),l(Fs),l(I),l(ae),l(K),l(pe),l(N),l(oe),As.d(),l(_s),l(q),l(ie),hs.d(),l(bs),l(U),l(ce),xs.d(),l(vs),l(j),l(re),ks.d(),l(ws),l(z),l(Be),Ds.d(),l(Ps),l(J),l(ye),l(de),l(W),l(ue),l($s),Es.d()),ss(u,s),ss(m,s),ss(_,s),ss(P,s),ss(H,s),ss(V,s)}}}const bt={title:"Programming the RP2040 MCU",description:"Configure a development environment in Linux",date:"2023-10-31",image:"/images/rp2040.jpg",categories:["RP2040","Raspberry Pi Foundation","Microcontrollers"],published:!0};class xt extends ft{constructor(B){super(),mt(this,B,null,Ct,dt,{})}}export{xt as default,bt as metadata};
